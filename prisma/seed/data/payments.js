// prisma/seed/data/payments.js - –§–Ü–ù–ê–õ–¨–ù–ê –í–ï–†–°–Ü–Ø
const { faker } = require('@faker-js/faker')
const { subDays, subHours } = require('date-fns')

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É VAT
function calculateVAT(grossAmount, taxRate = 23) {
  const netAmount = grossAmount / (1 + taxRate / 100)
  const taxAmount = grossAmount - netAmount
  
  return {
    netAmount: Math.round(netAmount * 100) / 100,
    netReceived: Math.round(netAmount * 100) / 100,
    taxAmount: Math.round(taxAmount * 100) / 100,
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
function generateTransactionId() {
  return `TRX-${Date.now()}-${faker.string.alphanumeric(8).toUpperCase()}`
}

async function seedPayments(prisma, logger, options = {}) {
  const isMinimal = options.minimal || false
  const MAX_PAYMENTS = isMinimal ? 50 : 200  // –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ
  
  // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –ø–ª–∞—Ç–µ–∂—ñ–≤
  let bookings = []
  let userPackages = []
  
  try {
    bookings = await prisma.booking.findMany({
      where: {
        OR: [
          { status: 'COMPLETED' },
          { status: 'CONFIRMED' },
          { status: 'IN_PROGRESS' }
        ],
        paymentId: null  // –¢—ñ–ª—å–∫–∏ –±–µ–∑ –ø–ª–∞—Ç–µ–∂—ñ–≤!
      },
      take: Math.floor(MAX_PAYMENTS / 2),  // –ü–æ–ª–æ–≤–∏–Ω–∞ –¥–ª—è bookings
      include: {
        student: true,
        instructor: true
      }
    })
  } catch (error) {
    logger && logger.warn('Could not fetch bookings for payments')
  }
  
  try {
    userPackages = await prisma.userPackage.findMany({
      where: {
        paymentId: null  // –¢—ñ–ª—å–∫–∏ –±–µ–∑ –ø–ª–∞—Ç–µ–∂—ñ–≤!
      },
      take: Math.floor(MAX_PAYMENTS / 2),  // –ü–æ–ª–æ–≤–∏–Ω–∞ –¥–ª—è packages
      include: {
        user: true,
        package: true
      }
    })
  } catch (error) {
    logger && logger.warn('Could not fetch user packages for payments')
  }
  
  if (bookings.length === 0 && userPackages.length === 0) {
    logger && logger.warn('No bookings or user packages found - skipping payments')
    return 0
  }
  
  // –î–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –¥—É–±–ª—ñ–≤
  const processedPackageIds = new Set()
  const processedBookingIds = new Set()
  const payments = []
  
  // 1. –ü–õ–ê–¢–ï–ñ–Ü –ó–ê –ü–ê–ö–ï–¢–ò (–ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç - —É–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ–ª–µ userPackageId)
  for (const userPackage of userPackages) {
    if (payments.length >= MAX_PAYMENTS / 2) break  // –û–±–º–µ–∂–µ–Ω–Ω—è
    if (!userPackage.package) continue
    if (processedPackageIds.has(userPackage.id)) continue
    
    processedPackageIds.add(userPackage.id)
    
    const amount = userPackage.purchasePrice || userPackage.package.price
    const { netAmount, netReceived, taxAmount } = calculateVAT(amount, 23)
    const createdAt = userPackage.purchasedAt || subDays(new Date(), faker.number.int({ min: 1, max: 60 }))
    
    payments.push({
      // –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
      userId: userPackage.userId,
      amount: amount,
      netAmount: netAmount,
      netReceived: netReceived,
      taxAmount: taxAmount,
      currency: 'PLN',
      status: userPackage.status === 'ACTIVE' ? 'COMPLETED' : 'PENDING',
      method: faker.helpers.arrayElement(['P24', 'CARD', 'BLIK', 'PAYPAL', 'GOOGLE_PAY']),
      
      // –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
      userPackageId: userPackage.id,  // –£–Ω—ñ–∫–∞–ª—å–Ω–µ –ø–æ–ª–µ!
      transactionId: generateTransactionId(),
      description: `Pakiet: ${userPackage.package.name}`,
      createdAt: createdAt,
      completedAt: userPackage.status === 'ACTIVE' ? subHours(createdAt, -0.5) : null,
      metadata: {
        packageName: userPackage.package.name,
        packageCredits: userPackage.package.credits
      }
    })
  }
  
  // 2. –ü–õ–ê–¢–ï–ñ–Ü –ó–ê –ë–†–û–ù–Æ–í–ê–ù–ù–Ø
  for (const booking of bookings) {
    if (payments.length >= MAX_PAYMENTS) break  // –û–±–º–µ–∂–µ–Ω–Ω—è
    if (booking.usedCredits > 0) continue  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —è–∫—â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω—ñ –∫—Ä–µ–¥–∏—Ç–∏
    if (processedBookingIds.has(booking.id)) continue
    
    processedBookingIds.add(booking.id)
    
    const paymentStatus = booking.isPaid ? 'COMPLETED' : 
      faker.helpers.weightedArrayElement([
        { value: 'COMPLETED', weight: 70 },
        { value: 'PENDING', weight: 20 },
        { value: 'PROCESSING', weight: 10 }
      ])
    
    const amount = booking.price || 200
    const { netAmount, netReceived, taxAmount } = calculateVAT(amount, 23)
    const createdAt = subHours(booking.startTime, faker.number.int({ min: 1, max: 48 }))
    
    payments.push({
      // –û–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
      userId: booking.studentId,
      amount: amount,
      netAmount: netAmount,
      netReceived: netReceived,
      taxAmount: taxAmount,
      currency: 'PLN',
      status: paymentStatus,
      method: faker.helpers.arrayElement(['P24', 'CARD', 'CASH', 'BLIK']),
      
      // –ù–µ–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
      bookingId: booking.id,
      transactionId: generateTransactionId(),
      description: `Lekcja jazdy`,
      createdAt: createdAt,
      completedAt: paymentStatus === 'COMPLETED' ? subHours(createdAt, -0.5) : null,
      metadata: {
        instructorName: `${booking.instructor.firstName} ${booking.instructor.lastName}`,
        lessonDate: booking.startTime.toISOString()
      }
    })
  }
  
  // 3. –î–û–î–ê–¢–ö–û–í–Ü –ü–õ–ê–¢–ï–ñ–Ü (–æ–±–º–µ–∂–µ–Ω–æ)
  if (!isMinimal && payments.length < MAX_PAYMENTS) {
    // –ö—ñ–ª—å–∫–∞ –Ω–µ–≤–¥–∞–ª–∏—Ö –ø–ª–∞—Ç–µ–∂—ñ–≤
    const failedCount = Math.min(5, MAX_PAYMENTS - payments.length)
    
    for (let i = 0; i < failedCount; i++) {
      if (payments.length >= MAX_PAYMENTS) break
      
      const amount = faker.helpers.arrayElement([160, 180, 200])
      const { netAmount, netReceived, taxAmount } = calculateVAT(amount, 23)
      const createdAt = subDays(new Date(), faker.number.int({ min: 1, max: 14 }))
      
      payments.push({
        userId: bookings[i % bookings.length]?.studentId || userPackages[0]?.userId,
        amount: amount,
        netAmount: netAmount,
        netReceived: netReceived,
        taxAmount: taxAmount,
        currency: 'PLN',
        status: 'FAILED',
        method: faker.helpers.arrayElement(['CARD', 'BLIK']),
        transactionId: generateTransactionId(),
        description: 'Nieudana pr√≥ba p≈Çatno≈õci',
        createdAt: createdAt,
        failedAt: subHours(createdAt, -0.5),
        metadata: {
          errorCode: 'INSUFFICIENT_FUNDS'
        }
      })
    }
  }
  
  // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–ª–∞—Ç–µ–∂—ñ–≤ –≤ –ë–î
  let created = 0
  let skipped = 0
  
  for (const paymentData of payments) {
    if (created >= MAX_PAYMENTS) {
      logger && logger.info(`Reached payment limit of ${MAX_PAYMENTS}`)
      break
    }
    
    try {
      // –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª—ñ –¥–ª—è userPackageId
      if (paymentData.userPackageId) {
        const existing = await prisma.payment.findFirst({
          where: { userPackageId: paymentData.userPackageId }
        })
        if (existing) {
          skipped++
          continue
        }
      }
      
      const payment = await prisma.payment.create({
        data: paymentData
      })
      created++
      
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤'—è–∑–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
      if (payment.userPackageId && payment.status === 'COMPLETED') {
        try {
          await prisma.userPackage.update({
            where: { id: payment.userPackageId },
            data: { paymentId: payment.id }
          })
        } catch (error) {
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
        }
      }
      
      if (payment.bookingId && payment.status === 'COMPLETED') {
        try {
          await prisma.booking.update({
            where: { id: payment.bookingId },
            data: { 
              isPaid: true,
              paymentId: payment.id
            }
          })
        } catch (error) {
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏
        }
      }
      
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
      if (created <= 5 || created % 20 === 0) {
        logger && logger.info(`Created payment ${created}: ${payment.status}`)
      }
    } catch (error) {
      skipped++
      
      // –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –¥—É–±–ª—ñ
      if (error.code === 'P2002') {
        continue
      }
      
      // –õ–æ–≥—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ –ø–æ–º–∏–ª–∫–∏
      if (skipped <= 3) {
        logger && logger.warn(`Payment error: ${error.message}`)
      }
    }
  }
  
  logger && logger.success(`‚úì Created ${created} payments (limit: ${MAX_PAYMENTS}, skipped: ${skipped})`)
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  if (created > 0) {
    try {
      const stats = await prisma.payment.groupBy({
        by: ['status'],
        _count: true,
        _sum: { amount: true }
      })
      
      logger && logger.info('\nüìä Payment Statistics:')
      stats.forEach(stat => {
        logger && logger.info(`   ${stat.status}: ${stat._count} payments`)
      })
    } catch (error) {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    }
  }
  
  return created
}

module.exports = seedPayments