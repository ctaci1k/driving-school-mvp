// booking.prisma - Booking and scheduling module

model Booking {
  id               String        @id @default(uuid())
  studentId        String        @map("student_id")
  instructorId     String        @map("instructor_id")
  vehicleId        String?       @map("vehicle_id")
  locationId       String?       @map("location_id")
  startTime        DateTime      @map("start_time")
  endTime          DateTime      @map("end_time")
  type             BookingType
  status           BookingStatus @default(scheduled)
  notes            String?       @db.Text
  price            Decimal?      @db.Decimal(10, 2)
  durationMinutes  Int?          @map("duration_minutes")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")

  // Relations
  student          User          @relation("StudentBookings", fields: [studentId], references: [id])
  instructor       User          @relation("InstructorBookings", fields: [instructorId], references: [id])
  vehicle          Vehicle?      @relation(fields: [vehicleId], references: [id])
  location         Location?     @relation(fields: [locationId], references: [id])
  payment          Payment[]
  cancellationRequest CancellationRequest?

  @@map("bookings")
  @@index([studentId, startTime(sort: Desc)])
  @@index([instructorId, startTime(sort: Desc)])
  @@index([startTime])
  @@index([status])
}

model AvailabilitySlot {
  id           String   @id @default(uuid())
  instructorId String   @map("instructor_id")
  date         DateTime @db.Date
  startTime    DateTime @map("start_time") @db.Time
  endTime      DateTime @map("end_time") @db.Time
  isAvailable  Boolean  @default(true) @map("is_available")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  instructor   User     @relation(fields: [instructorId], references: [id])

  @@map("availability_slots")
  @@index([instructorId, date])
  @@unique([instructorId, date, startTime])
}

model CancellationRequest {
  id          String             @id @default(uuid())
  bookingId   String             @unique @map("booking_id")
  requestedBy String             @map("requested_by")
  reason      String?            @db.Text
  status      CancellationStatus @default(pending)
  createdAt   DateTime           @default(now()) @map("created_at")

  // Relations
  booking     Booking            @relation(fields: [bookingId], references: [id])
  requester   User               @relation(fields: [requestedBy], references: [id])

  @@map("cancellation_requests")
  @@index([status])
}

model Location {
  id              String         @id @default(uuid())
  name            String
  type            LocationType
  status          LocationStatus @default(active)
  address         String
  city            String
  postalCode      String         @map("postal_code")
  country         String         @default("Poland")
  lat             Decimal?       @db.Decimal(10, 8)
  lng             Decimal?       @db.Decimal(11, 8)
  phone           String?
  email           String?
  website         String?
  workingHours    Json           @default("{}") @map("working_hours")
  totalStudents   Int            @default(0) @map("total_students")
  activeStudents  Int            @default(0) @map("active_students")
  monthlyRevenue  Decimal        @default(0.00) @map("monthly_revenue") @db.Decimal(10, 2)
  createdAt       DateTime       @default(now()) @map("created_at")

  // Relations
  vehicles        Vehicle[]
  bookings        Booking[]
  instructors     InstructorLocation[]

  @@map("locations")
  @@index([type])
  @@index([status])
}

model InstructorLocation {
  instructorId String   @map("instructor_id")
  locationId   String   @map("location_id")
  isPrimary    Boolean  @default(false) @map("is_primary")

  // Relations
  instructor   Instructor @relation(fields: [instructorId], references: [id])
  location     Location   @relation(fields: [locationId], references: [id])

  @@id([instructorId, locationId])
  @@map("instructor_locations")
}