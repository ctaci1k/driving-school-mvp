// payment.prisma - Payment and financial management module

model Package {
  id               String          @id @default(uuid())
  name             String
  description      String?         @db.Text
  category         PackageCategory?
  status           PackageStatus   @default(active)
  price            Decimal         @db.Decimal(10, 2)
  discountedPrice  Decimal?        @map("discounted_price") @db.Decimal(10, 2)
  durationDays     Int             @map("duration_days")
  theoryHours      Int             @default(0) @map("theory_hours")
  practicalHours   Int             @default(0) @map("practical_hours")
  additionalHours  Int             @default(0) @map("additional_hours")
  examAttempts     Int             @default(1) @map("exam_attempts")
  features         Json            @default("[]")
  pricingRules     Json            @default("{}") @map("pricing_rules")
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")

  // Relations
  studentPackages  StudentPackage[]
  payments         Payment[]

  @@map("packages")
  @@index([category])
  @@index([status])
}

model StudentPackage {
  id               String   @id @default(uuid())
  studentId        String   @map("student_id")
  packageId        String   @map("package_id")
  purchaseDate     DateTime @default(now()) @map("purchase_date")
  expiryDate       DateTime @map("expiry_date")
  totalCredits     Int      @map("total_credits")
  usedCredits      Int      @default(0) @map("used_credits")
  remainingCredits Int?     @map("remaining_credits")
  status           String   @default("active")
  pricePaid        Decimal  @map("price_paid") @db.Decimal(10, 2)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  student          User     @relation(fields: [studentId], references: [id])
  package          Package  @relation(fields: [packageId], references: [id])

  @@map("student_packages")
  @@index([studentId])
  @@index([packageId])
  @@index([status])
}

model Payment {
  id          String        @id @default(uuid())
  studentId   String        @map("student_id")
  bookingId   String?       @map("booking_id")
  packageId   String?       @map("package_id")
  invoiceId   String?       @unique @map("invoice_id")
  amount      Decimal       @db.Decimal(10, 2)
  currency    String        @default("PLN")
  method      PaymentMethod?
  status      PaymentStatus @default(pending)
  paidAt      DateTime?     @map("paid_at")
  metadata    Json          @default("{}")
  createdAt   DateTime      @default(now()) @map("created_at")

  // Relations
  student     User          @relation("StudentPayments", fields: [studentId], references: [id])
  booking     Booking?      @relation(fields: [bookingId], references: [id])
  package     Package?      @relation(fields: [packageId], references: [id])
  invoice     Invoice?      @relation(fields: [invoiceId], references: [id])

  @@map("payments")
  @@index([studentId, createdAt(sort: Desc)])
  @@index([status])
  @@index([bookingId])
  @@index([packageId])
}

model Invoice {
  id              String        @id @default(uuid())
  number          String        @unique
  type            InvoiceType   @default(regular)
  status          InvoiceStatus @default(draft)
  customerId      String        @map("customer_id")
  issueDate       DateTime      @map("issue_date")
  dueDate         DateTime      @map("due_date")
  paymentDate     DateTime?     @map("payment_date")
  subtotal        Decimal       @db.Decimal(10, 2)
  taxRate         Decimal       @default(23.00) @map("tax_rate") @db.Decimal(5, 2)
  taxAmount       Decimal       @map("tax_amount") @db.Decimal(10, 2)
  total           Decimal       @db.Decimal(10, 2)
  paid            Decimal       @default(0.00) @db.Decimal(10, 2)
  due             Decimal?      @db.Decimal(10, 2)
  items           Json          @default("[]")
  billingDetails  Json          @default("{}") @map("billing_details")
  createdAt       DateTime      @default(now()) @map("created_at")

  // Relations
  customer        User          @relation("CustomerInvoices", fields: [customerId], references: [id])
  payment         Payment?

  @@map("invoices")
  @@index([customerId])
  @@index([status])
  @@index([issueDate])
}