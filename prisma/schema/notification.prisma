// prisma/schema/notification.prisma

// ============================================
// NOTIFICATION & COMMUNICATION MODELS
// All messaging and notification related tables
// ============================================

// ============================================
// NOTIFICATION - System notifications
// ============================================
model Notification {
 id            String   @id @default(cuid())
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // ===== NOTIFICATION TYPE =====
 type          NotificationType
 category      String?  // booking, payment, system, etc.
 
 // ===== CONTENT =====
 title         String
 message       String
 shortMessage  String?  // For SMS/Push
 
 // Rich Content
 imageUrl      String?
 actionUrl     String?
 actionLabel   String?
 
 // ===== CHANNEL & DELIVERY =====
 channel       NotificationChannel
 priority      NotificationPriority @default(MEDIUM)
 
 // ===== STATUS =====
 status        NotificationStatus @default(PENDING)
 
 // ===== SCHEDULING =====
 scheduledFor  DateTime?
 sendAfter     DateTime?
 expiresAt     DateTime?
 
 // ===== DELIVERY TRACKING =====
 sentAt        DateTime?
 deliveredAt   DateTime?
 readAt        DateTime?
 clickedAt     DateTime?
 failedAt      DateTime?
 
 // Error Handling
 errorMessage  String?
 errorCode     String?
 retryCount    Int      @default(0)
 maxRetries    Int      @default(3)
 nextRetryAt   DateTime?
 
 // ===== METADATA =====
 metadata      Json?
 tags          String[]
 
 // Related Entities
 relatedEntityType String? // booking, payment, lesson, etc.
 relatedEntityId   String?
 
 // Batch/Campaign
 batchId       String?
 campaignId    String?
 
 // ===== PREFERENCES =====
 respectQuietHours Boolean @default(true)
 allowDuplicates   Boolean @default(false)
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 @@index([userId])
 @@index([type])
 @@index([status])
 @@index([channel])
 @@index([scheduledFor])
 @@index([batchId])
 @@map("notifications")
}

// ============================================
// MESSAGE - Internal messaging system
// ============================================
model Message {
 id            String   @id @default(cuid())
 
 // ===== PARTICIPANTS =====
 senderId      String
 sender        User     @relation("SentMessages", fields: [senderId], references: [id])
 receiverId    String
 receiver      User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
 
 // ===== CONTENT =====
 subject       String?
 content       String
 contentHtml   String?
 
 // ===== TYPE & CATEGORY =====
 messageType   String   @default("direct") // direct, broadcast, system
 category      String?  // inquiry, complaint, feedback, etc.
 
 // ===== STATUS =====
 status        String   @default("sent") // draft, sent, delivered, failed
 isRead        Boolean  @default(false)
 readAt        DateTime?
 
 // ===== PRIORITY =====
 priority      MessagePriority @default(NORMAL)
 isImportant   Boolean  @default(false)
 isStarred     Boolean  @default(false)
 
 // ===== THREADING =====
 threadId      String?
 parentId      String?
 parent        Message?  @relation("MessageThread", fields: [parentId], references: [id])
 replies       Message[] @relation("MessageThread")
 replyCount    Int      @default(0)
 
 // ===== ATTACHMENTS =====
 hasAttachments Boolean @default(false)
 attachments   Json?
//  Example:
//  {
//    "files": [
//      { "name": "document.pdf", "url": "...", "size": 1024, "type": "application/pdf" }
//    ]
//  }

 
 // ===== ACTIONS =====
 isArchived    Boolean  @default(false)
 archivedAt    DateTime?
 isDeleted     Boolean  @default(false)
 deletedAt     DateTime?
 
 // ===== DELIVERY =====
 deliveredAt   DateTime?
 deliveryStatus String?
 
 // ===== SPAM/MODERATION =====
 isSpam        Boolean  @default(false)
 spamScore     Float?
 moderationStatus String? // pending, approved, rejected
 moderatedBy   String?
 moderatedAt   DateTime?
 
 // ===== METADATA =====
 metadata      Json?
 tags          String[]
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 @@index([senderId])
 @@index([receiverId])
 @@index([isRead])
 @@index([threadId])
 @@index([parentId])
 @@index([status])
 @@map("messages")
}

// ============================================
// SUPPORT TICKET - Customer support system
// ============================================
model SupportTicket {
 id            String   @id @default(cuid())
 
 // ===== TICKET NUMBER =====
 ticketNumber  String   @unique @default(cuid())
 
 // ===== REQUESTER =====
 userId        String
 user          User     @relation(fields: [userId], references: [id])
 
 // ===== CLASSIFICATION =====
 category      TicketCategory
 subcategory   String?
 priority      TicketPriority @default(MEDIUM)
 severity      String?  // low, medium, high, critical
 
 // ===== CONTENT =====
 subject       String
 description   String
 
 // ===== STATUS =====
 status        TicketStatus @default(OPEN)
 
 // Status Timeline
 openedAt      DateTime @default(now())
 acknowledgedAt DateTime?
 inProgressAt  DateTime?
 onHoldAt      DateTime?
 resolvedAt    DateTime?
 closedAt      DateTime?
 reopenedAt    DateTime?
 
 // ===== ASSIGNMENT =====
 assignedTo    String?
 assignedBy    String?
 assignedAt    DateTime?
 
 // Team/Department
 department    String?
 team          String?
 
 // ===== RESOLUTION =====
 resolution    String?
 resolutionNotes String?
 resolvedBy    String?
 
 // ===== SLA =====
 slaDeadline   DateTime?
 slaBreached   Boolean  @default(false)
 responseTime  Int?     // minutes
 resolutionTime Int?    // minutes
 
 // ===== SATISFACTION =====
 satisfactionRating Int? // 1-5
 satisfactionComment String?
 
 // ===== ESCALATION =====
 isEscalated   Boolean  @default(false)
 escalatedTo   String?
 escalatedAt   DateTime?
 escalationReason String?
 
 // ===== RELATED ENTITIES =====
 relatedEntityType String? // booking, payment, lesson, etc.
 relatedEntityId   String?
 
 // ===== TAGS & LABELS =====
 tags          String[]
 labels        String[]
 
 // ===== ATTACHMENTS =====
 hasAttachments Boolean @default(false)
 attachments   Json?
 
 // ===== INTERNAL =====
 internalNotes String?
 isPublic      Boolean  @default(true)
 
 // ===== SOURCE =====
 source        String   @default("web") // web, email, phone, chat, social
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 // Relations
 replies       TicketReply[]
 statusHistory TicketStatusHistory[]
 
 @@index([userId])
 @@index([ticketNumber])
 @@index([status])
 @@index([priority])
 @@index([assignedTo])
 @@index([category])
 @@map("support_tickets")
}

// ============================================
// TICKET REPLY - Support ticket responses
// ============================================
model TicketReply {
 id            String        @id @default(cuid())
 ticketId      String
 ticket        SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
 userId        String
 user          User          @relation(fields: [userId], references: [id])
 
 // ===== CONTENT =====
 content       String
 contentHtml   String?
 
 // ===== TYPE =====
 replyType     String   @default("comment") // comment, solution, note
 isInternal    Boolean  @default(false)
 isStaff       Boolean  @default(false)
 
 // ===== STATUS =====
 status        String   @default("published") // draft, published, deleted
 
 // ===== VISIBILITY =====
 isPublic      Boolean  @default(true)
 visibleTo     String[] // user ids who can see this reply
 
 // ===== ATTACHMENTS =====
 hasAttachments Boolean @default(false)
 attachments   Json?
 
 // ===== ACTIONS =====
 isPinned      Boolean  @default(false)
 isEdited      Boolean  @default(false)
 editedAt      DateTime?
 editedBy      String?
 
 // ===== REACTIONS =====
 helpful       Int      @default(0)
 notHelpful    Int      @default(0)
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 @@index([ticketId])
 @@index([userId])
 @@map("ticket_replies")
}

// ============================================
// TICKET STATUS HISTORY - Audit trail
// ============================================
model TicketStatusHistory {
 id            String        @id @default(cuid())
 ticketId      String
 ticket        SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
 
 // Status Change
 fromStatus    TicketStatus?
 toStatus      TicketStatus
 
 // Changed By
 changedBy     String
 
 // Reason
 reason        String?
 notes         String?
 
 createdAt     DateTime @default(now())
 
 @@index([ticketId])
 @@map("ticket_status_history")
}

// ============================================
// EMAIL TEMPLATE - Reusable email templates
// ============================================
model EmailTemplate {
 id            String   @id @default(cuid())
 
 // ===== IDENTIFICATION =====
 code          String   @unique // booking_confirmation, payment_success, etc.
 name          String
 description   String?
 
 // ===== CONTENT =====
 subject       String
 bodyHtml      String
 bodyText      String
 
 // ===== VARIABLES =====
 variables     String[] // Available template variables
 requiredVars  String[] // Required variables
 
 // ===== LOCALIZATION =====
 language      String   @default("pl")
 
 // ===== CATEGORY =====
 category      String   // transactional, marketing, system
 
 // ===== SENDER =====
 fromName      String?
 fromEmail     String?
 replyTo       String?
 
 // ===== HEADERS =====
 headers       Json?
 
 // ===== ATTACHMENTS =====
 defaultAttachments Json?
 
 // ===== STATUS =====
 isActive      Boolean  @default(true)
 isDraft       Boolean  @default(false)
 
 // ===== TESTING =====
 testData      Json?    // Sample data for testing
 
 // ===== USAGE =====
 usageCount    Int      @default(0)
 lastUsedAt    DateTime?
 
 // ===== VERSION =====
 version       Int      @default(1)
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 createdBy     String?
 
 @@index([code])
 @@index([category])
 @@index([language])
 @@map("email_templates")
}

// ============================================
// SMS TEMPLATE - SMS message templates
// ============================================
model SmsTemplate {
 id            String   @id @default(cuid())
 
 // ===== IDENTIFICATION =====
 code          String   @unique
 name          String
 description   String?
 
 // ===== CONTENT =====
 message       String   // Max 160 chars typically
 
 // ===== VARIABLES =====
 variables     String[]
 
 // ===== LOCALIZATION =====
 language      String   @default("pl")
 
 // ===== CATEGORY =====
 category      String
 
 // ===== SENDER =====
 senderId      String?  // Sender ID/Name
 
 // ===== STATUS =====
 isActive      Boolean  @default(true)
 
 // ===== USAGE =====
 usageCount    Int      @default(0)
 lastUsedAt    DateTime?
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 @@index([code])
 @@index([category])
 @@map("sms_templates")
}

// ============================================
// PUSH TEMPLATE - Push notification templates
// ============================================
model PushTemplate {
 id            String   @id @default(cuid())
 
 // ===== IDENTIFICATION =====
 code          String   @unique
 name          String
 
 // ===== CONTENT =====
 title         String
 body          String
 
 // ===== RICH CONTENT =====
 imageUrl      String?
 iconUrl       String?
 badgeUrl      String?
 soundFile     String?
 
 // ===== ACTIONS =====
 actionUrl     String?
 actionLabel   String?
 actions       Json?    // Multiple action buttons
 
 // ===== DATA =====
 dataPayload   Json?
 
 // ===== PLATFORM SPECIFIC =====
 iosPayload    Json?
 androidPayload Json?
 webPayload    Json?
 
 // ===== TARGETING =====
 targetPlatforms String[] @default(["ios", "android", "web"])
 
 // ===== STATUS =====
 isActive      Boolean  @default(true)
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 @@index([code])
 @@map("push_templates")
}

// ============================================
// ANNOUNCEMENT - System-wide announcements
// ============================================
model Announcement {
 id            String   @id @default(cuid())
 
 // ===== CONTENT =====
 title         String
 content       String
 contentHtml   String?
 
 // ===== TYPE =====
 type          String   @default("info") // info, warning, success, error
 category      String?  // maintenance, feature, policy, etc.
 
 // ===== TARGETING =====
 targetRoles   UserRole[]
 targetUserIds String[]
 targetLocations String[]
 
 // ===== DISPLAY =====
 displayLocation String[] @default(["dashboard"]) // dashboard, login, header
 
 // ===== PRIORITY =====
 priority      Int      @default(0)
 isPinned      Boolean  @default(false)
 
 // ===== SCHEDULING =====
 publishAt     DateTime @default(now())
 expiresAt     DateTime?
 
 // ===== STATUS =====
 isActive      Boolean  @default(true)
 isDraft       Boolean  @default(false)
 
 // ===== DISMISSAL =====
 isDismissible Boolean  @default(true)
 dismissedBy   String[] // User IDs who dismissed
 
 // ===== ACTIONS =====
 actionUrl     String?
 actionLabel   String?
 
 // ===== STATS =====
 viewCount     Int      @default(0)
 clickCount    Int      @default(0)
 dismissCount  Int      @default(0)
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 createdBy     String?
 
 @@index([isActive])
 @@index([publishAt])
 @@index([expiresAt])
 @@map("announcements")
}

// ============================================
// NOTIFICATION PREFERENCES - User settings
// ============================================
model NotificationPreferences {
 id            String   @id @default(cuid())
 userId        String   @unique
 
 // ===== EMAIL PREFERENCES =====
 emailEnabled  Boolean  @default(true)
 emailTypes    String[] // Types of emails user wants to receive
 emailFrequency String  @default("immediate") // immediate, daily, weekly
 
 // ===== SMS PREFERENCES =====
 smsEnabled    Boolean  @default(true)
 smsTypes      String[]
 
 // ===== PUSH PREFERENCES =====
 pushEnabled   Boolean  @default(true)
 pushTypes     String[]
 
 // ===== IN-APP PREFERENCES =====
 inAppEnabled  Boolean  @default(true)
 inAppTypes    String[]
 
 // ===== QUIET HOURS =====
 quietHoursEnabled Boolean @default(false)
 quietHoursStart   String? // "22:00"
 quietHoursEnd     String? // "08:00"
 quietHoursTimezone String @default("Europe/Warsaw")
 
 // ===== DIGEST SETTINGS =====
 digestEnabled Boolean  @default(false)
 digestFrequency String? // daily, weekly, monthly
 digestDay     Int?     // Day of week/month
 digestTime    String?  // "09:00"
 
 // ===== UNSUBSCRIBE =====
 unsubscribedAll Boolean @default(false)
 unsubscribedAt DateTime?
 unsubscribeToken String? @unique
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 @@map("notification_preferences")
}

// ============================================
// ENUMS FOR NOTIFICATION MODULE
// ============================================



enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLED
  BOOKING_RESCHEDULED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  PAYMENT_REMINDER
  SCHEDULE_CHANGE
  LESSON_FEEDBACK
  EXAM_REMINDER
  EXAM_RESULT
  PACKAGE_EXPIRING
  ACHIEVEMENT_UNLOCKED
  SYSTEM_NOTIFICATION
  PROMOTIONAL
  BIRTHDAY
  DOCUMENT_EXPIRING
  MAINTENANCE_REMINDER
  NEWS_UPDATE
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
  WHATSAPP
  TELEGRAM
  PHONE
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  CANCELLED
  BOUNCED
  QUEUED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum MessagePriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TicketCategory {
  TECHNICAL
  BILLING
  SCHEDULING
  INSTRUCTOR
  VEHICLE
  COMPLAINT
  SUGGESTION
  GENERAL
  URGENT
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
  CRITICAL
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_RESPONSE
  ON_HOLD
  ESCALATED
  RESOLVED
  CLOSED
  REOPENED
}