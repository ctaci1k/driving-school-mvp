// prisma/schema/location.prisma

// ============================================
// LOCATION MODULE MODELS
// Multi-branch support and location management
// ============================================

// ============================================
// LOCATION - Branch/School locations
// ============================================
model Location {
 id            String   @id @default(cuid())
 
 // ===== BASIC INFO =====
 name          String
 code          String   @unique  // SHORT_CODE like "WAW01", "KRK01"
 type          LocationType @default(BRANCH)
 
 // ===== ADDRESS =====
 address       String
 streetNumber  String?
 city          String
 state         String?
 postalCode    String
 country       String   @default("PL")
 
 // Geo Coordinates
 latitude      Float?
 longitude     Float?
 plusCode      String?  // Google Plus Code
 
 // ===== CONTACT =====
 phone         String
 alternatePhone String?
 email         String
 website       String?
 
 // ===== OPERATING HOURS =====
 operatingHours Json    // Structured hours per day
// Example:
//  {
//    "monday": { "open": "08:00", "close": "18:00" },
//    "tuesday": { "open": "08:00", "close": "18:00" },
//    "saturday": { "open": "09:00", "close": "14:00" },
//    "sunday": { "closed": true }
//  }

 
 // Special Hours
 holidayHours   Json?   // Holiday schedule
 summerHours    Json?   // Summer schedule
 
 // ===== CAPACITY =====
 maxInstructors Int     @default(10)
 maxVehicles    Int     @default(15)
 maxStudents    Int     @default(100)
 maxDailyBookings Int   @default(50)
 
 // Current Usage
 activeInstructors Int   @default(0)
 activeVehicles   Int    @default(0)
 activeStudents   Int    @default(0)
 
 // ===== FACILITIES =====
 hasClassroom     Boolean @default(true)
 classroomCapacity Int?
 hasParkingLot    Boolean @default(true)
 parkingSpaces    Int?
 hasWaitingArea   Boolean @default(true)
 hasRestroom      Boolean @default(true)
 hasAccessibility Boolean @default(false)
 hasWifi          Boolean @default(true)
 
 // Training Areas
 hasPrivatePracticeArea Boolean @default(false)
 practiceAreaSize      Int?    // square meters
 
 // ===== STATUS =====
 status        LocationStatus @default(ACTIVE)
 isActive      Boolean        @default(true)
 isPrimary     Boolean        @default(false)  // Main/HQ location
 isOnline      Boolean        @default(false)  // Virtual location for online classes
 
 // ===== MANAGEMENT =====
 managerId     String?
 managerName   String?
 managerPhone  String?
 managerEmail  String?
 
 // ===== SERVICE AREA =====
 serviceRadius Int?     // km
 servicePostalCodes String[]
 serviceCities String[]
 
 // ===== PRICING =====
 pricingZone   String?  // For location-based pricing
 priceMultiplier Float @default(1.0)
 
 // ===== SETTINGS =====
 timezone      String   @default("Europe/Warsaw")
 currency      String   @default("PLN")
 locale        String   @default("pl-PL")
 
 // Booking Settings
 advanceBookingDays Int  @default(30)
 minBookingHours   Int   @default(24)  // Minimum hours before lesson
 maxBookingPerStudent Int @default(5)
 
 // ===== INTEGRATIONS =====
 googlePlaceId String?
 googleMapsUrl String?
 facebookPageId String?
 
 // ===== RATINGS =====
 rating        Float    @default(0)
 totalReviews  Int      @default(0)
 
 // ===== PHOTOS =====
 logoUrl       String?
 coverPhotoUrl String?
 photoUrls     String[]
 virtualTourUrl String?
 
 // ===== METADATA =====
 establishedDate DateTime?
 licenseNumber String?
 taxId         String?
 registrationNumber String?
 
 // ===== NOTES =====
 description   String?
 publicNotes   String?  // Shown to customers
 internalNotes String?  // Internal only
 
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 createdBy String?
 
 // Relations
 users         User[]
 vehicles      Vehicle[]
 bookings      Booking[]
 instructorSchedules InstructorSchedule[]
 rooms         Room[]
 locationAmenities LocationAmenity[]
 locationHolidays LocationHoliday[]
 locationStats LocationStats[]
 nearbyPlaces  NearbyPlace[]
 
 @@index([code])
 @@index([city])
 @@index([status])
 @@index([isPrimary])
 @@map("locations")
}

// ============================================
// ROOM - Classrooms and training rooms
// ============================================
model Room {
 id            String   @id @default(cuid())
 locationId    String
 location      Location @relation(fields: [locationId], references: [id])
 
 // ===== BASIC INFO =====
 name          String
 code          String
 type          RoomType
 floor         Int?
 roomNumber    String?
 
 // ===== CAPACITY =====
 capacity      Int
 examCapacity  Int?     // For theory exams
 
 // ===== FEATURES =====
 hasProjector  Boolean  @default(false)
 hasWhiteboard Boolean  @default(true)
 hasAC         Boolean  @default(false)
 hasComputers  Boolean  @default(false)
 computerCount Int?
 hasAudioSystem Boolean @default(false)
 hasVideoConference Boolean @default(false)
 
 // ===== DIMENSIONS =====
 area          Float?   // square meters
 length        Float?   // meters
 width         Float?   // meters
 height        Float?   // meters
 
 // ===== AVAILABILITY =====
 isAvailable   Boolean  @default(true)
 isBookable    Boolean  @default(true)
 
 // Maintenance
 underMaintenance Boolean @default(false)
 maintenanceFrom DateTime?
 maintenanceTo   DateTime?
 
 // ===== USAGE =====
 usageType     String[] // ["theory_class", "exam", "meeting", "waiting"]
 
 // ===== BOOKING =====
 hourlyRate    Decimal? @db.Decimal(10, 2)
 dailyRate     Decimal? @db.Decimal(10, 2)
 
 // ===== EQUIPMENT =====
 equipment     Json?    // Detailed equipment list
 
 // ===== PHOTOS =====
 photoUrls     String[]
 layoutUrl     String?  // Floor plan
 
 // ===== NOTES =====
 description   String?
 rules         String?
 
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 
 // Relations
 roomBookings  RoomBooking[]
 theoryClasses TheoryClass[]
 
 @@unique([locationId, code])
 @@index([locationId])
 @@index([type])
 @@index([isAvailable])
 @@map("rooms")
}

// ============================================
// ROOM BOOKING - Classroom reservations
// ============================================
model RoomBooking {
 id            String   @id @default(cuid())
 roomId        String
 room          Room     @relation(fields: [roomId], references: [id])
 
 // ===== BOOKING DETAILS =====
 date          DateTime
 startTime     String   // "09:00"
 endTime       String   // "11:00"
 duration      Int      // minutes
 
 // ===== PURPOSE =====
 purpose       RoomBookingPurpose
 title         String
 description   String?
 
 // ===== ORGANIZER =====
 organizerId   String   // userId
 attendeeCount Int?
 attendeeList  String[]
 
 // ===== THEORY CLASS =====
 theoryClassId String?
 theoryClass   TheoryClass? @relation(fields: [theoryClassId], references: [id])
 
 // ===== STATUS =====
 status        RoomBookingStatus @default(CONFIRMED)
 
 // ===== RECURRING =====
 isRecurring   Boolean  @default(false)
 recurringRule String?  // RRULE format
 recurringId   String?  // Group recurring bookings
 
 // ===== EQUIPMENT =====
 equipmentNeeded String[]
 setupRequired String?
 
 // ===== CATERING =====
 cateringRequired Boolean @default(false)
 cateringDetails String?
 
 // ===== NOTES =====
 notes         String?
 
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 createdBy String?
 
 @@index([roomId])
 @@index([date])
 @@index([theoryClassId])
 @@index([organizerId])
 @@map("room_bookings")
}

// ============================================
// THEORY CLASS - Group theory lessons
// ============================================
model TheoryClass {
 id            String   @id @default(cuid())
 locationId    String
 roomId        String?
 room          Room?    @relation(fields: [roomId], references: [id])
 
 // ===== CLASS INFO =====
 name          String
 code          String   @unique
 topic         String
 level         ExperienceLevel
 
 // ===== SCHEDULE =====
 date          DateTime
 startTime     String   // "18:00"
 endTime       String   // "20:00"
 duration      Int      // minutes
 
 // ===== INSTRUCTOR =====
 instructorId  String   // userId
 substituteId  String?  // Backup instructor
 
 // ===== CAPACITY =====
 maxStudents   Int
 enrolledCount Int      @default(0)
 waitlistCount Int      @default(0)
 
 // ===== ENROLLMENT =====
 enrollmentDeadline DateTime?
 minStudents   Int      @default(3)
 
 // ===== STATUS =====
 status        TheoryClassStatus @default(SCHEDULED)
 
 // ===== MATERIALS =====
 syllabus      String?
 materialsUrl  String[]
 homeworkUrl   String?
 
 // ===== ONLINE =====
 isOnline      Boolean  @default(false)
 onlineUrl     String?
 onlinePlatform String? // Zoom, Teams, etc.
 recordingUrl  String?
 
 // ===== PRICING =====
 price         Decimal? @db.Decimal(10, 2)
 isFree        Boolean  @default(false)
 
 // ===== ATTENDANCE =====
 attendanceTaken Boolean @default(false)
 presentCount  Int?
 absentCount   Int?
 
 // ===== NOTES =====
 description   String?
 prerequisites String?
 notes         String?
 
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 
 // Relations
 enrollments   TheoryClassEnrollment[]
 roomBookings  RoomBooking[]
 
 @@index([locationId])
 @@index([date])
 @@index([instructorId])
 @@index([status])
 @@map("theory_classes")
}

// ============================================
// THEORY CLASS ENROLLMENT
// ============================================
model TheoryClassEnrollment {
 id            String      @id @default(cuid())
 theoryClassId String
 theoryClass   TheoryClass @relation(fields: [theoryClassId], references: [id])
 studentId     String      // userId
 
 // ===== STATUS =====
 status        TheoryEnrollmentStatus  @default(CONFIRMED)
 
 // ===== ATTENDANCE =====
 attended      Boolean?
 arrivalTime   DateTime?
 departureTime DateTime?
 
 // ===== PAYMENT =====
 isPaid        Boolean  @default(false)
 paymentId     String?
 
 // ===== WAITLIST =====
 isWaitlist    Boolean  @default(false)
 waitlistPosition Int?
 
 // ===== NOTES =====
 notes         String?
 
 enrolledAt DateTime @default(now())
 
 @@unique([theoryClassId, studentId])
 @@index([theoryClassId])
 @@index([studentId])
 @@map("theory_class_enrollments")
}

// ============================================
// LOCATION AMENITY - Available facilities
// ============================================
model LocationAmenity {
 id            String   @id @default(cuid())
 locationId    String
 location      Location @relation(fields: [locationId], references: [id])
 
 // ===== AMENITY =====
 type          AmenityType
 name          String
 description   String?
 
 // ===== AVAILABILITY =====
 isAvailable   Boolean  @default(true)
 isFree        Boolean  @default(true)
 fee           Decimal? @db.Decimal(10, 2)
 
 // ===== DETAILS =====
 quantity      Int?
 capacity      Int?
 
 // ===== ICON/IMAGE =====
 icon          String?
 imageUrl      String?
 
 createdAt DateTime @default(now())
 
 @@index([locationId])
 @@index([type])
 @@map("location_amenities")
}

// ============================================
// LOCATION HOLIDAY - Branch-specific holidays
// ============================================
model LocationHoliday {
 id            String   @id @default(cuid())
 locationId    String
 location      Location @relation(fields: [locationId], references: [id])
 
 // ===== HOLIDAY =====
 name          String
 date          DateTime
 
 // ===== TYPE =====
 type          HolidayType
 isRecurring   Boolean  @default(false)
 recurrenceRule String? // RRULE for recurring holidays
 
 // ===== CLOSURE =====
 isClosed      Boolean  @default(true)
 hasLimitedHours Boolean @default(false)
 specialHours  Json?    // Special operating hours
 
 // ===== AFFECTED SERVICES =====
 affectsBookings Boolean @default(true)
 affectsTheory Boolean  @default(true)
 affectsExams  Boolean  @default(true)
 
 // ===== NOTES =====
 description   String?
 publicNotice  String?
 
 createdAt DateTime @default(now())
 createdBy String?
 
 @@index([locationId])
 @@index([date])
 @@map("location_holidays")
}

// ============================================
// NEARBY PLACE - Points of interest
// ============================================
model NearbyPlace {
 id            String   @id @default(cuid())
 locationId    String
 location      Location @relation(fields: [locationId], references: [id])
 
 // ===== PLACE INFO =====
 type          NearbyPlaceType
 name          String
 address       String?
 
 // ===== DISTANCE =====
 distanceKm    Float
 walkingTime   Int?     // minutes
 drivingTime   Int?     // minutes
 
 // ===== COORDINATES =====
 latitude      Float?
 longitude     Float?
 
 // ===== DETAILS =====
 description   String?
 googlePlaceId String?
 
 // ===== RELEVANCE =====
 isPickupPoint Boolean  @default(false)
 isLandmark    Boolean  @default(false)
 isPracticeArea Boolean @default(false)
 
 createdAt DateTime @default(now())
 
 @@index([locationId])
 @@index([type])
 @@map("nearby_places")
}

// ============================================
// LOCATION STATS - Performance metrics
// ============================================
model LocationStats {
 id            String   @id @default(cuid())
 locationId    String
 location      Location @relation(fields: [locationId], references: [id])
 
 // ===== PERIOD =====
 periodType    PeriodType
 periodStart   DateTime
 periodEnd     DateTime
 
 // ===== BOOKINGS =====
 totalBookings Int
 completedBookings Int
 cancelledBookings Int
 noShowBookings Int
 
 // ===== STUDENTS =====
 newStudents   Int
 activeStudents Int
 graduatedStudents Int
 
 // ===== REVENUE =====
 totalRevenue  Decimal  @db.Decimal(10, 2)
 bookingRevenue Decimal @db.Decimal(10, 2)
 packageRevenue Decimal @db.Decimal(10, 2)
 
 // ===== UTILIZATION =====
 instructorUtilization Float // percentage
 vehicleUtilization Float    // percentage
 roomUtilization Float       // percentage
 
 // ===== EXAMS =====
 theoryExamsPassed Int
 theoryExamsFailed Int
 practicalExamsPassed Int
 practicalExamsFailed Int
 
 // ===== RATINGS =====
 averageRating Float
 totalReviews  Int
 
 // ===== EFFICIENCY =====
 averageLessonsToPass Float
 averageStudentDuration Int // days from start to license
 
 createdAt DateTime @default(now())
 
 @@unique([locationId, periodType, periodStart])
 @@index([locationId])
 @@index([periodType])
 @@index([periodStart])
 @@map("location_stats")
}

// ============================================
// ENUMS FOR LOCATION MODULE
// ============================================

enum LocationType {
 HEADQUARTERS
 BRANCH
 SATELLITE
 ONLINE
 PRACTICE_AREA
 EXAM_CENTER
 ADMINISTRATIVE
}

enum LocationStatus {
 ACTIVE
 INACTIVE
 MAINTENANCE
 CLOSED_TEMPORARILY
 CLOSED_PERMANENTLY
 COMING_SOON
}

enum RoomType {
 CLASSROOM
 EXAM_ROOM
 PRACTICE_ROOM
 MEETING_ROOM
 WAITING_AREA
 SIMULATOR_ROOM
 OFFICE
 STORAGE
}

enum RoomBookingPurpose {
 THEORY_CLASS
 EXAM
 MEETING
 TRAINING
 EVENT
 MAINTENANCE
 OTHER
}

enum RoomBookingStatus {
 PENDING
 CONFIRMED
 IN_PROGRESS
 COMPLETED
 CANCELLED
}

enum TheoryClassStatus {
 SCHEDULED
 OPEN_FOR_ENROLLMENT
 FULL
 IN_PROGRESS
 COMPLETED
 CANCELLED
 POSTPONED
}

enum TheoryEnrollmentStatus  {
 PENDING
 
 CONFIRMED
 WAITLIST
 ATTENDED
 ABSENT
 CANCELLED
}

enum AmenityType {
 PARKING
 WIFI
 RESTROOM
 KITCHEN
 WAITING_AREA
 STUDY_AREA
 SIMULATOR
 VENDING_MACHINE
 COFFEE_MACHINE
 WATER_FOUNTAIN
 LOCKERS
 BIKE_RACK
 ACCESSIBILITY
 FIRST_AID
 SECURITY
 OTHER
}

enum HolidayType {
 NATIONAL
 REGIONAL
 LOCAL
 COMPANY
 SPECIAL
}

enum NearbyPlaceType {
 PUBLIC_TRANSPORT
 PARKING
 RESTAURANT
 CAFE
 SHOPPING
 SCHOOL
 HOSPITAL
 LANDMARK
 PRACTICE_AREA
 EXAM_CENTER
 GAS_STATION
 OTHER
}