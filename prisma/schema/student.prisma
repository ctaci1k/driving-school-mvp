// prisma/schema/student.prisma

// ============================================
// STUDENT MODULE MODELS
// All student-specific tables and relations
// ============================================

// ============================================
// STUDENT PROFILE - Extended info for students
// ============================================
model StudentProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Student Identification
  studentNumber String   @unique @default(cuid())
  studentCardId String?
  
  // Learning Information
  learningStyle      LearningStyle?
  experienceLevel    ExperienceLevel @default(BEGINNER)
  hasLicenseInOtherCountry Boolean    @default(false)
  previousDrivingSchool    String?
  
  // Medical & Special Needs
  wearsCorrectionGlasses Boolean  @default(false)
  hasDisabilities        Boolean  @default(false)
  specialNeeds           String?
  medicalCertificateDate DateTime?
  medicalCertificateExpiry DateTime?
  
  // Goals & Motivation
  targetExamDate    DateTime?
  reasonForLearning String?
  availableHoursPerWeek Int?
  
  // Referral
  referralSource    String?
  referredBy        String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
   // Statistics
  totalLessonsCompleted Int    @default(0)
  averageRating         Float? @default(0)
  
  // Preferences
  preferredInstructorId String? // Most preferred instructor

  

  @@index([studentNumber])
  @@map("student_profiles")
}

// ============================================
// STUDENT PROGRESS - Detailed skill tracking
// ============================================
model StudentProgress {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // ===== PARKING SKILLS (0-100) =====
  parkingGeneral         Int @default(0)
  parallelParking        Int @default(0)
  perpendicularParking   Int @default(0)
  angleParking           Int @default(0)
  reverseParkingBay      Int @default(0)
  emergencyStop          Int @default(0)
  
  // ===== TRAFFIC RULES KNOWLEDGE (0-100) =====
  trafficRulesGeneral    Int @default(0)
  signRecognition        Int @default(0)
  rightOfWay             Int @default(0)
  speedLimits            Int @default(0)
  roadMarkings           Int @default(0)
  
  // ===== CITY DRIVING SKILLS (0-100) =====
  cityDrivingGeneral     Int @default(0)
  laneChanging           Int @default(0)
  intersections          Int @default(0)
  roundabouts            Int @default(0)
  pedestrianCrossings    Int @default(0)
  trafficLights          Int @default(0)
  
  // ===== HIGHWAY SKILLS (0-100) =====
  highwayGeneral         Int @default(0)
  merging                Int @default(0)
  overtaking             Int @default(0)
  exitingHighway         Int @default(0)
  maintainingSpeed       Int @default(0)
  
  // ===== SPECIAL CONDITIONS (0-100) =====
  nightDriving           Int @default(0)
  rainDriving            Int @default(0)
  fogDriving             Int @default(0)
  snowDriving            Int @default(0)
  
  // ===== VEHICLE CONTROL (0-100) =====
  steeringControl        Int @default(0)
  clutchControl          Int @default(0)
  gearChanging           Int @default(0)
  smoothBraking          Int @default(0)
  hillStart              Int @default(0)
  
  // ===== SAFETY & OBSERVATION (0-100) =====
  mirrorUsage            Int @default(0)
  blindSpotChecking      Int @default(0)
  signaling              Int @default(0)
  safeFollowingDistance  Int @default(0)
  hazardPerception       Int @default(0)
  
  // ===== OVERALL METRICS =====
  overallProgress        Int   @default(0)  // 0-100
  confidenceLevel        Int   @default(0)  // 0-100
  examReadiness          Int   @default(0)  // 0-100
  safetyRating           Int   @default(0)  // 0-100
  
  // ===== STATISTICS =====
  totalHoursDriven       Float @default(0)
  totalKmDriven          Float @default(0)
  totalLessonsCompleted  Int   @default(0)
  totalLessonsCancelled  Int   @default(0)
  totalLessonsRescheduled Int  @default(0)
  
  // Theory
  theoryTestsTaken       Int   @default(0)
  theoryTestsPassed      Int   @default(0)
  averageTheoryScore     Float @default(0)
  lastTheoryScore        Int?
  
  // Practical
  practicalTestsTaken    Int   @default(0)
  practicalTestsPassed   Int   @default(0)
  
  // ===== MILESTONES =====
  firstLessonDate        DateTime?
  lastLessonDate         DateTime?
  theoryPassedDate       DateTime?
  practicalPassedDate    DateTime?
  licenseIssuedDate      DateTime?
  
  // ===== STREAKS & GAMIFICATION =====
  currentStreak          Int   @default(0)  // Days
  longestStreak          Int   @default(0)  // Days
  totalPoints            Int   @default(0)
  currentLevel           Int   @default(1)

    // Overall statistics
  overallRating      Float?   @default(0) // Average rating from all lessons
  examReadinessScore Int?     @default(0) // Calculated exam readiness (0-100)
  
  // Skills tracking
  weakPoints    Json?    // Array of weak skills/areas
  strongPoints  Json?    // Array of strong skills/areas
  currentSkill  String?  // Current skill being focused on
  
  // Last activity
  lastUpdatedAt DateTime @updatedAt
  

  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("student_progress")
}

// ============================================
// ENROLLMENT - Student's package subscription
// ============================================
model Enrollment {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId     String
  package       Package  @relation(fields: [packageId], references: [id])
  
  // Status
  status        EnrollmentStatus @default(ACTIVE)
  
  // Dates
  startDate     DateTime @default(now())
  endDate       DateTime?
  expiresAt     DateTime
  pausedAt      DateTime?
  resumedAt     DateTime?
  completedAt   DateTime?
  
  // Credits & Lessons
  creditsTotal      Int
  creditsUsed       Int @default(0)
  creditsRemaining  Int
  lessonsTotal      Int
  lessonsCompleted  Int @default(0)
  lessonsRemaining  Int
  lessonsCancelled  Int @default(0)
  
  // Financial
  totalPrice        Decimal @db.Decimal(10, 2)
  discountAmount    Decimal @db.Decimal(10, 2) @default(0)
  finalPrice        Decimal @db.Decimal(10, 2)
  totalPaid         Decimal @db.Decimal(10, 2) @default(0)
  paymentPlan       PaymentPlan @default(FULL)
  
  // Progress
  progressPercentage   Int @default(0)
  estimatedCompletion  DateTime?
  
  // Metadata
  notes            String?
  cancellationReason String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  bookings  Booking[]
  payments  Payment[]
  packageUsages PackageUsage[]
  
  @@unique([userId, packageId, status])
  @@index([userId])
  @@index([packageId])
  @@index([status])
  @@index([expiresAt])
  @@map("enrollments")
}

// ============================================
// LESSON FEEDBACK - Post-lesson evaluation
// ============================================
model LessonFeedback {
  id            String   @id @default(cuid())
  bookingId     String   @unique
  booking       Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  
  // ===== FROM INSTRUCTOR =====
  instructorId  String
  instructor    User     @relation("InstructorFeedback", fields: [instructorId], references: [id])
  
  // Performance Rating
  overallPerformance   Int?    // 1-5
  technicalSkills      Int?    // 1-5
  trafficAwareness     Int?    // 1-5
  confidence           Int?    // 1-5
  improvement          Int?    // 1-5
  
  // Detailed Assessment
  instructorComments   String?
  skillsAssessed       Json?   // Detailed JSON of skill scores
  
  // Areas of Focus
  strengths            String[]
  areasOfImprovement   String[]
  nextLessonFocus      String[]
  
  // Objectives
  objectivesSet        String[]
  objectivesCompleted  String[]
  
  // Safety
  dangerousSituations  Int     @default(0)
  minorErrors          Int     @default(0)
  majorErrors          Int     @default(0)
  
  // ===== FROM STUDENT =====
  
  // Ratings
  studentRating        Int?    // 1-5 overall satisfaction
  instructorRating     Int?    // 1-5 rate instructor
  vehicleRating        Int?    // 1-5 rate vehicle condition
  
  // Feedback
  studentComments      String?
  wouldRecommend       Boolean?
  
  // ===== METADATA =====
  isExamPrep          Boolean @default(false)
  kmDriven            Float?
  routeTaken          String?
  weatherConditions   String?
  trafficConditions   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([bookingId])
  @@index([instructorId])
  @@map("lesson_feedbacks")
}

// ============================================
// ACHIEVEMENTS & GAMIFICATION
// ============================================
model Achievement {
  id            String   @id @default(cuid())
  
  // Basic Info
  name          String   @unique
  description   String
  icon          String
  category      AchievementCategory
  
  // Points & Rewards
  points        Int
  badgeColor    String   @default("#3B82F6")
  isSecret      Boolean  @default(false)
  
  // Unlock Criteria
  criteriaType  String   // lessons_completed, hours_driven, skills_mastered, etc
  criteriaValue Int
  criteriaData  Json?    // Additional criteria configuration
  
  // Display
  sortOrder     Int      @default(0)
  isActive      Boolean  @default(true)
  
  createdAt DateTime @default(now())
  
  // Relations
  userAchievements UserAchievement[]
  
  @@index([category])
  @@index([isActive])
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievementId String
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  
  // Progress
  progress      Int         @default(0)  // 0-100
  unlockedAt    DateTime?
  
  // Notification
  notified      Boolean     @default(false)
  sharedAt      DateTime?   // If shared on social
  
  createdAt     DateTime    @default(now())
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([unlockedAt])
  @@map("user_achievements")
}

// ============================================
// EXAM RESULTS
// ============================================
model ExamResult {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Exam Info
  type          ExamType
  attemptNumber Int      @default(1)
  
  // Results
  score         Int
  maxScore      Int
  percentage    Float
  passed        Boolean
  
  // ===== THEORY EXAM DETAILS =====
  totalQuestions    Int?
  correctAnswers    Int?
  wrongAnswers      Int?
  skippedQuestions  Int?
  timeSpent         Int?     // seconds
  categoryScores    Json?    // Score breakdown by category
  
  // ===== PRACTICAL EXAM DETAILS =====
  instructorId      String?
  instructor        User?    @relation("ExamInstructor", fields: [instructorId], references: [id])
  
  // Route & Conditions
  routeTaken        String?
  examinerName      String?
  vehicleUsed       String?
  weatherConditions String?
  trafficConditions String?
  
  // Faults
  minorFaults       Int?
  majorFaults       Int?
  dangerousFaults   Int?
  faultDetails      Json?    // Detailed breakdown of faults
  
  // ===== COMMON FIELDS =====
  feedback          String?
  nextAttemptDate   DateTime?
  certificateNumber String?
  certificateUrl    String?
  
  takenAt   DateTime @default(now())
  createdAt DateTime @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([passed])
  @@map("exam_results")
}

// ============================================
// STUDENT PREFERENCES
// ============================================
model StudentPreferences {
  id            String   @id @default(cuid())
  userId        String   @unique
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // ===== SCHEDULING PREFERENCES =====
  preferredDays         String[]  // ["MON", "TUE", "WED"]
  preferredTimeSlots    String[]  // ["MORNING", "AFTERNOON", "EVENING"]
  preferredStartTime    String?   // "09:00"
  preferredEndTime      String?   // "17:00"
  weekendAvailability   Boolean   @default(false)
  
  // Instructor Preferences
  preferredInstructorIds String[]
  avoidInstructorIds     String[]
  preferredGender        Gender?
  
  // Vehicle Preferences
  preferredVehicleIds    String[]
  preferredTransmission  Transmission?
  
  // Location Preferences
  preferredLocationId    String?
  maxDistanceKm          Int?
  
  // ===== LEARNING PREFERENCES =====
  learningPace          LearningPace     @default(MODERATE)
  lessonDuration        Int              @default(120) // minutes
  focusAreas            String[]
  avoidAreas            String[]
  
  // Communication
  preferredLanguage     String           @default("pl")
  communicationStyle    CommunicationStyle @default(DETAILED)
  
  // ===== NOTIFICATION PREFERENCES =====
  reminderTime          Int              @default(24)  // hours before lesson
  reminderTypes         String[]         @default(["email", "sms"])
  
  // Notification Times
  doNotDisturbStart     String?          // "22:00"
  doNotDisturbEnd       String?          // "08:00"
  
  // ===== SPECIAL REQUIREMENTS =====
  requiresFemaleInstructor Boolean       @default(false)
  requiresEnglishSpeaking  Boolean       @default(false)
  anxietySupport          Boolean        @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("student_preferences")
}

// ============================================
// ENUMS FOR STUDENT MODULE
// ============================================

enum LearningStyle {
  VISUAL
  AUDITORY
  KINESTHETIC
  READING_WRITING
  MIXED
}

enum ExperienceLevel {
  BEGINNER
  SOME_EXPERIENCE
  REFRESHER
  ADVANCED
}

enum EnrollmentStatus {
  PENDING
  ACTIVE

  PAUSED
  COMPLETED
  EXPIRED
  CANCELLED
}

enum PaymentPlan {
  FULL
  INSTALLMENTS
  MONTHLY
  PAY_AS_YOU_GO
}

enum AchievementCategory {
  MILESTONE
  SKILL
  STREAK
  SPECIAL
  SOCIAL
  EXAM
}

enum ExamType {
  THEORY_MOCK
  THEORY_OFFICIAL
  PRACTICAL_MOCK
  PRACTICAL_OFFICIAL
  INTERNAL_ASSESSMENT
}

enum LearningPace {
  SLOW
  MODERATE
  FAST
  INTENSIVE
}

enum Gender {
  MALE
  FEMALE
  ANY
}

enum CommunicationStyle {
  BRIEF
  DETAILED
  VISUAL
  ENCOURAGING
}