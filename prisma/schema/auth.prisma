// prisma/schema/auth.prisma

// ============================================
// AUTHENTICATION & SESSION MODELS
// All authentication related tables
// ============================================

// ============================================
// SESSION - User sessions management
// ============================================
model Session {
 id            String   @id @default(cuid())
 sessionToken  String   @unique
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Session Info
 expires       DateTime
 
 // Device & Location
 userAgent     String?
 browser       String?
 os            String?
 device        String?
 ip            String?
 country       String?
 city          String?
 
 // Activity
 lastActivity  DateTime @default(now())
 isActive      Boolean  @default(true)
 
 createdAt     DateTime @default(now())
 
 @@index([userId])
 @@index([sessionToken])
 @@index([expires])
 @@map("sessions")
}

// ============================================
// REFRESH TOKEN - JWT refresh tokens
// ============================================
model RefreshToken {
 id            String   @id @default(cuid())
 token         String   @unique
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Token Info
 expiresAt     DateTime
 
 // Usage
 used          Boolean  @default(false)
 usedAt        DateTime?
 replacedBy    String?  // New token that replaced this one
 
 // Security
 revoked       Boolean  @default(false)
 revokedAt     DateTime?
 revokedReason String?
 
 // Device
 deviceId      String?
 
 createdAt     DateTime @default(now())
 
 @@index([userId])
 @@index([token])
 @@index([expiresAt])
 @@index([deviceId])
 @@map("refresh_tokens")
}

// ============================================
// PASSWORD RESET - Password recovery tokens
// ============================================
model PasswordReset {
 id            String   @id @default(cuid())
 token         String   @unique
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Token Info
 expiresAt     DateTime
 
 // Usage
 used          Boolean  @default(false)
 usedAt        DateTime?
 
 // Request Info
 requestedIp   String?
 requestedUserAgent String?
 
 // Verification
 verificationCode String?
 verificationAttempts Int @default(0)
 
 createdAt     DateTime @default(now())
 
 @@index([userId])
 @@index([token])
 @@index([expiresAt])
 @@map("password_resets")
}

// ============================================
// LOGIN HISTORY - Authentication audit log
// ============================================
model LoginHistory {
 id            String   @id @default(cuid())
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Login Result
 success       Boolean
 failureReason String?  // wrong_password, account_locked, etc.
 
 // Method
 authMethod    String   @default("password") // password, oauth, magic_link
 provider      String?  // google, facebook, etc.
 
 // Device & Location
 ip            String
 userAgent     String?
 browser       String?
 os            String?
 device        String?
 country       String?
 city          String?
 
 // Session
 sessionId     String?
 
 // Security
 suspiciousActivity Boolean @default(false)
 suspiciousReason String?
 
 // MFA
 mfaUsed       Boolean  @default(false)
 mfaMethod     String?  // sms, app, email
 
 createdAt     DateTime @default(now())
 
 @@index([userId])
 @@index([createdAt])
 @@index([success])
 @@index([ip])
 @@map("login_history")
}

// ============================================
// EMAIL VERIFICATION - Email confirmation tokens
// ============================================
model EmailVerification {
 id            String   @id @default(cuid())
 token         String   @unique
 email         String
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Token Info
 expiresAt     DateTime
 
 // Usage
 verified      Boolean  @default(false)
 verifiedAt    DateTime?
 
 // Attempts
 attempts      Int      @default(0)
 lastAttemptAt DateTime?
 
 createdAt     DateTime @default(now())

 
 
 @@index([userId])
 @@index([email])
 @@index([token])
 @@map("email_verifications")
}

// ============================================
// TWO FACTOR AUTH - 2FA configurations
// ============================================
model TwoFactorAuth {
 id            String   @id @default(cuid())
 userId        String   @unique
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Secret
 secret        String
 
 // Backup Codes
 backupCodes   String[] // Encrypted backup codes
 usedBackupCodes String[]
 
 // Status
 enabled       Boolean  @default(false)
 verifiedAt    DateTime?
 
 // Methods
 methods       String[] @default(["app"]) // app, sms, email
 primaryMethod String   @default("app")
 
 // Recovery
 recoveryEmail String?
 recoveryPhone String?
 
 // Last Use
 lastUsedAt    DateTime?
 lastUsedMethod String?
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 @@map("two_factor_auth")
}

// ============================================
// TWO FACTOR TOKENS - Temporary 2FA codes
// ============================================
model TwoFactorToken {
 id            String   @id @default(cuid())
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Token
 token         String
 
 // Type
 type          String   // sms, email, backup
 
 // Validity
 expiresAt     DateTime
 
 // Usage
 used          Boolean  @default(false)
 usedAt        DateTime?
 
 // Attempts
 attempts      Int      @default(0)
 
 createdAt     DateTime @default(now())
 
 @@unique([userId, token])
 @@index([userId])
 @@index([expiresAt])
 @@map("two_factor_tokens")
}

// ============================================
// OAUTH ACCOUNT - Third-party auth providers
// ============================================
model OAuthAccount {
 id                String   @id @default(cuid())
 userId            String
 user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Provider Info
 provider          String   // google, facebook, github, etc.
 providerAccountId String
 
 // Tokens
 accessToken       String?
 refreshToken      String?
 expiresAt         DateTime?
 tokenType         String?
 scope             String?
 idToken           String?
 
 // Profile Data
 providerProfile   Json?
 
 // Status
 isActive          Boolean  @default(true)
 
 createdAt         DateTime @default(now())
 updatedAt         DateTime @updatedAt
 
 @@unique([provider, providerAccountId])
 @@index([userId])
 @@map("oauth_accounts")
}

// ============================================
// API KEY - API access tokens
// ============================================
model ApiKey {
 id            String   @id @default(cuid())
 userId        String
 user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
 // Key Info
 name          String
 key           String   @unique
 hashedKey     String   @unique
 
 // Permissions
 scopes        String[] // read, write, delete, etc.
 
 // Rate Limiting
 rateLimit     Int?     // requests per hour
 
 // Validity
 expiresAt     DateTime?
 
 // Usage
 lastUsedAt    DateTime?
 usageCount    Int      @default(0)
 
 // Status
 isActive      Boolean  @default(true)
 revokedAt     DateTime?
 revokedReason String?
 
 // IP Restrictions
 allowedIps    String[]
 
 createdAt     DateTime @default(now())
 updatedAt     DateTime @updatedAt
 
 @@index([userId])
 @@index([key])
 @@index([hashedKey])
 @@map("api_keys")
}

// ============================================
// SECURITY LOG - Security events audit
// ============================================
model SecurityLog {
 id            String   @id @default(cuid())
 userId        String?
 user          User?    @relation(fields: [userId], references: [id])
 
 // Event Info
 event         String   // password_changed, 2fa_enabled, suspicious_login, etc.
 severity      String   // info, warning, critical
 
 // Details
 description   String
 metadata      Json?
 
 // Source
 ip            String?
 userAgent     String?
 
 // Resolution
 resolved      Boolean  @default(false)
 resolvedAt    DateTime?
 resolvedBy    String?
 resolution    String?
 
 createdAt     DateTime @default(now())
 
 @@index([userId])
 @@index([event])
 @@index([severity])
 @@index([createdAt])
 @@map("security_logs")
}