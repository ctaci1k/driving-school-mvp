// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= USERS & AUTH =============


model User {
  id           String    @id @default(cuid())
  email        String    @unique
  phone        String?   @unique
  passwordHash String
  firstName    String
  lastName     String
  role         UserRole
  
  // Phase 2 additions
  language           String    @default("pl")
  emailNotifications Boolean   @default(true)
  smsNotifications   Boolean   @default(true)
  avatar             String?
  dateOfBirth        DateTime?
  licenseNumber      String?
  address            String?
  city               String?
  postalCode         String?
  status             String    @default("ACTIVE")
  emailVerified      DateTime?
  phoneVerified      DateTime?
  lastLoginAt        DateTime?
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?

  // Relations
  studentBookings    Booking[] @relation("StudentBookings")
  instructorBookings Booking[] @relation("InstructorBookings")
  instructorSchedule InstructorSchedule[]
  assignedVehicles   Vehicle[]
  payments          Payment[]
  userPackages      UserPackage[]
  notifications     Notification[]

scheduleTemplates  ScheduleTemplate[]
scheduleExceptions  ScheduleException[]

  @@index([email])
  @@index([phone])
  @@index([role])
}

// ============= LOCATIONS =============
model Location {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  address     String
  city        String
  postalCode  String
  latitude    Float?
  longitude   Float?
  maxInstructors Int   @default(5)
  maxVehicles    Int   @default(10)
  isActive    Boolean  @default(true)
  isPrimary   Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings    Booking[]
  vehicles    Vehicle[]

  @@index([code])
  @@index([city])
}

// ============= VEHICLES =============
model Vehicle {
  id                 String    @id @default(cuid())
  registrationNumber String    @unique
  vin                String?   @unique
  make               String
  model              String
  year               Int
  color              String?
  category           String    // Will be VehicleCategory enum
  transmission       String    // Will be Transmission enum
  fuelType           String    // Will be FuelType enum
  
  assignedInstructorId String?
  assignedInstructor   User?     @relation(fields: [assignedInstructorId], references: [id])
  baseLocationId       String
  baseLocation         Location  @relation(fields: [baseLocationId], references: [id])
  
  currentMileage      Int       @default(0)
  lastServiceDate     DateTime?
  nextServiceDate     DateTime?
  insuranceExpiry     DateTime  // Fixed: DateTime
  inspectionExpiry    DateTime  // Fixed: DateTime
  
  status             String    @default("ACTIVE")
  
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  bookings           Booking[]
  maintenanceLogs    MaintenanceLog[]

  @@index([registrationNumber])
  @@index([assignedInstructorId])
  @@index([baseLocationId])
}

// ============= PACKAGES =============
model Package {
  id           String   @id @default(cuid())
  name         String
  description  String?
  credits      Int
  price        Decimal  @db.Decimal(10, 2)
  currency     String   @default("PLN")
  validityDays Int
  isActive     Boolean  @default(true)
  isPopular    Boolean  @default(false)
  sortOrder    Int      @default(0)
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  userPackages UserPackage[]

  @@index([isActive])
}

// ============= USER PACKAGES =============
model UserPackage {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  packageId       String
  package         Package  @relation(fields: [packageId], references: [id])
  
  creditsTotal    Int
  creditsUsed     Int      @default(0)
  creditsRemaining Int
  
  purchasedAt     DateTime @default(now())
  expiresAt       DateTime
  
  paymentId       String?  @unique
  payment         Payment?
  
  status          String   @default("PENDING")

  @@index([userId])
  @@index([status])
  @@index([expiresAt])
}

// ============= PAYMENTS =============
model Payment {
  id              String    @id @default(cuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  
  bookingId       String?   @unique
  booking         Booking?
  userPackageId   String?   @unique
  userPackage     UserPackage? @relation(fields: [userPackageId], references: [id])
  
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("PLN")
  
  p24SessionId    String?   @unique
  p24OrderId      String?   @unique
  p24Token        String?
  
  status          String    @default("PENDING")
  method          String    @default("P24")
  
  description     String?
  metadata        Json?
  
  createdAt       DateTime  @default(now())
  completedAt     DateTime?
  failedAt        DateTime?
  
  @@index([userId])
  @@index([status])
  @@index([p24SessionId])
}

// ============= BOOKINGS (Updated) =============
model Booking {
  id           String         @id @default(cuid())
  studentId    String
  student      User           @relation("StudentBookings", fields: [studentId], references: [id])
  instructorId String
  instructor   User           @relation("InstructorBookings", fields: [instructorId], references: [id])
  
  // Phase 2 additions
  vehicleId    String?
  vehicle      Vehicle?       @relation(fields: [vehicleId], references: [id])
  locationId   String?
  location     Location?      @relation(fields: [locationId], references: [id])
  
  startTime    DateTime
  endTime      DateTime
  duration     Int            @default(120) // minutes
  
  lessonType   String         @default("STANDARD")
  status       BookingStatus  @default(CONFIRMED)
  
  price        Decimal?       @db.Decimal(10, 2)
  isPaid       Boolean        @default(false)
  paymentId    String?        @unique
  payment      Payment?       @relation(fields: [paymentId], references: [id])
  usedCredits  Int           @default(0)
  
  notes        String?
  cancelledAt  DateTime?
  cancelledBy  String?
  cancellationReason String?
  
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([studentId])
  @@index([instructorId])
  @@index([vehicleId])
  @@index([locationId])
  @@index([startTime])
  @@index([status])
}

// ============= INSTRUCTOR SCHEDULES =============
model InstructorSchedule {
  id           String   @id @default(cuid())
  instructorId String
  instructor   User     @relation(fields: [instructorId], references: [id])
  dayOfWeek    Int      // 0 = Sunday, 6 = Saturday
  startTime    String   // "09:00"
  endTime      String   // "17:00"
  
  // Phase 2 addition
  specificDate DateTime?
  
  // Buffer Time - DODAJ TE LINIE!
  bufferBefore Int     @default(15) // minuty przed lekcją
  bufferAfter  Int     @default(15) // minuty po lekcji
  
  isAvailable  Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([instructorId, dayOfWeek])
  @@index([instructorId])
  @@index([specificDate])
}
// ============= NOTIFICATIONS =============
model Notification {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  type        String   // NotificationType
  channel     String   // NotificationChannel
  
  subject     String?
  content     String
  metadata    Json?
  
  status      String   @default("PENDING")
  sentAt      DateTime?
  readAt      DateTime?
  failedAt    DateTime?
  errorMessage String?
  
  createdAt   DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([status])
}

// ============= MAINTENANCE LOGS =============
model MaintenanceLog {
  id          String   @id @default(cuid())
  vehicleId   String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  
  type        String   // MaintenanceType
  description String
  cost        Decimal? @db.Decimal(10, 2)
  mileage     Int
  
  performedAt DateTime
  performedBy String?
  nextDueDate DateTime?
  nextDueMileage Int?
  
  createdAt   DateTime @default(now())

  @@index([vehicleId])
  @@index([type])
}
// Додайте цю модель після InstructorSchedule:

model ScheduleTemplate {
  id            String   @id @default(cuid())
  instructorId  String
  instructor    User     @relation(fields: [instructorId], references: [id])
  name          String
  description   String?
  weekPattern   Json     // Зберігаємо як JSON масив
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([instructorId])
}

model ScheduleException {
  id            String   @id @default(cuid())
  instructorId  String
  instructor    User     @relation(fields: [instructorId], references: [id])
  
  type          String   // vacation, sickLeave, holiday, etc.
  startDate     DateTime
  endDate       DateTime
  allDay        Boolean  @default(true)
  startTime     String?  // "14:00" якщо не allDay
  endTime       String?  // "18:00" якщо не allDay
  
  reason        String
  description   String?
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([instructorId])
  @@index([startDate, endDate])
}

// ============= ENUMS =============
enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}

enum BookingStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}