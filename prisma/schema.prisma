// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= USERS & AUTH =============

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  passwordHash  String?
  firstName     String
  lastName      String
  phone         String?
  phoneVerified DateTime?
  avatar        String?
  dateOfBirth   DateTime?

  // Emergency contacts
  emergencyContact String?
  emergencyPhone   String?

  role   UserRole @default(STUDENT)
  status UserStatus   @default(ACTIVE)

  // LOCATION RELATIONSHIP - CRITICAL FOR MULTI-BRANCH
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  // Address
  address    String?
  city       String?
  postalCode String?

  // Для студентів
  completedLessons      Int?
  examAttempts          Int?
  preferredInstructorId String?
  examPassed            Boolean?
  examPassedDate        DateTime?
  notes                 String?

  // License info (для всіх)
  licenseNumber String?

  // Для інструкторів
  licenseCategories String[]
  licenseIssuedDate DateTime?
  licenseExpiryDate DateTime?

  // Instructor specific
  instructorLicenseNumber String?
  instructorLicenseDate   DateTime?
  yearsOfExperience       Int?
  specializations         String[]
  rating                  Float?
  totalLessons            Int?
  successRate             Float?

  // Settings
  language           String  @default("pl")
  emailNotifications Boolean @default(true)
  smsNotifications   Boolean @default(true)

  // Dates
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  studentBookings    Booking[]            @relation("StudentBookings")
  instructorBookings Booking[]            @relation("InstructorBookings")
  instructorSchedule InstructorSchedule[]
  assignedVehicles   Vehicle[]            @relation("AssignedInstructor")
  payments           Payment[]
  userPackages       UserPackage[]
  notifications      Notification[]
  scheduleTemplates  ScheduleTemplate[]
  scheduleExceptions ScheduleException[]

  @@index([email])
  @@index([role])
  @@index([locationId])
}

// ============= LOCATIONS =============
model Location {
  id             String  @id @default(cuid())
  name           String
  code           String  @unique
  address        String
  city           String
  postalCode     String
  latitude       Float?
  longitude      Float?
  maxInstructors Int     @default(5)
  maxVehicles    Int     @default(10)
  isActive       Boolean @default(true)
  isPrimary      Boolean @default(false)

  instructorSchedules InstructorSchedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings Booking[]
  vehicles Vehicle[]
  users    User[]    // NEW: Users assigned to this location

  @@index([code])
  @@index([city])
}

// ============= VEHICLES =============
model Vehicle {
  id                 String  @id @default(cuid())
  registrationNumber String  @unique
  vin                String? @unique
  make               String
  model              String
  year               Int
  color              String?
  category           VehicleCategory
  transmission       Transmission
  fuelType           FuelType

  ownershipType         OwnershipType?
  lastServiceMileage    Int?
  nextServiceMileage    Int?
  insuranceCompany      String?
  insurancePolicyNumber String?
  purchaseDate          DateTime?
  purchasePrice         Float?
  features              String[]
  notes                 String?

  assignedInstructorId String?
  assignedInstructor   User?   @relation("AssignedInstructor", fields: [assignedInstructorId], references: [id])

  baseLocationId String
  baseLocation   Location @relation(fields: [baseLocationId], references: [id])

  currentMileage   Int       @default(0)
  lastServiceDate  DateTime?
  nextServiceDate  DateTime?
  insuranceExpiry  DateTime
  inspectionExpiry DateTime

  status VehicleStatus @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  bookings        Booking[]
  maintenanceLogs MaintenanceLog[]

  @@index([registrationNumber])
  @@index([assignedInstructorId])
  @@index([baseLocationId])
}

// ============= PACKAGES =============
model Package {
  id           String  @id @default(cuid())
  name         String
  description  String?
  credits      Int
  price        Decimal @db.Decimal(10, 2)
  currency     String  @default("PLN")
  validityDays Int
  isActive     Boolean @default(true)
  isPopular    Boolean @default(false)
  sortOrder    Int     @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userPackages UserPackage[]

  @@index([isActive])
}

// ============= USER PACKAGES =============
model UserPackage {
  id               String        @id @default(cuid())
  userId           String
  packageId        String
  creditsTotal     Int
  creditsUsed      Int           @default(0)
  creditsRemaining Int
  purchasedAt      DateTime      @default(now())
  expiresAt        DateTime
  status           PackageStatus @default(ACTIVE)
  purchasePrice    Float
  paymentId        String?       @unique

  // Gift fields
  isGift      Boolean? @default(false)
  giftFrom    String?
  giftMessage String?
  metadata    Json?

  notes String?

  // Relations
  user    User    @relation(fields: [userId], references: [id])
  package Package @relation(fields: [packageId], references: [id])
  payment Payment? @relation(fields: [paymentId], references: [id])

  @@index([userId])
  @@index([packageId])
}

// ============= PAYMENTS =============
model Payment {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  bookingId     String?  @unique
  booking       Booking?
  userPackageId String?  @unique
  userPackage   UserPackage?

  amount   Decimal @db.Decimal(10, 2)
  currency String  @default("PLN")

  p24SessionId String? @unique
  p24OrderId   String? @unique
  p24Token     String?

  status PaymentStatus @default(PENDING)
  method PaymentMethod @default(P24)

  description String?
  metadata    Json?

  createdAt   DateTime  @default(now())
  completedAt DateTime?
  failedAt    DateTime?

  @@index([userId])
  @@index([status])
  @@index([p24SessionId])
}

// ============= BOOKINGS =============
model Booking {
  id           String @id @default(cuid())
  studentId    String
  student      User   @relation("StudentBookings", fields: [studentId], references: [id])
  instructorId String
  instructor   User   @relation("InstructorBookings", fields: [instructorId], references: [id])

  vehicleId  String?
  vehicle    Vehicle?  @relation(fields: [vehicleId], references: [id])
  locationId String?
  location   Location? @relation(fields: [locationId], references: [id])

  startTime DateTime
  endTime   DateTime
  duration  Int      @default(120) // minutes

  lessonType LessonType    @default(STANDARD)
  status     BookingStatus @default(CONFIRMED)

  price       Decimal? @db.Decimal(10, 2)
  isPaid      Boolean  @default(false)
  paymentId   String?  @unique
  payment     Payment? @relation(fields: [paymentId], references: [id])
  usedCredits Int      @default(0)

  notes              String?
  cancelledAt        DateTime?
  cancelledBy        String?
  cancellationReason String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([studentId])
  @@index([instructorId])
  @@index([vehicleId])
  @@index([locationId])
  @@index([startTime])
  @@index([status])
}

// ============= INSTRUCTOR SCHEDULES =============
model InstructorSchedule {
  id           String @id @default(cuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id])
  dayOfWeek    Int // 0 = Sunday, 6 = Saturday
  startTime    String // "09:00"
  endTime      String // "17:00"

  locationId    String?
  location      Location? @relation(fields: [locationId], references: [id])
  maxBookings   Int?
  breakStart    String?
  breakDuration Int?
  nightDriving  Boolean?  @default(false)
  earlyMorning  Boolean?  @default(false)
  notes         String?

  // Phase 2 addition
  specificDate DateTime?

  // Buffer Time
  bufferBefore Int @default(15) // minutes before lesson
  bufferAfter  Int @default(15) // minutes after lesson

  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([instructorId, dayOfWeek])
  @@index([instructorId])
  @@index([specificDate])
}

// ============= NOTIFICATIONS =============
model Notification {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  type    NotificationType
  channel NotificationChannel

  subject  String?
  message  String
  metadata Json?

  title        String?
  priority     NotificationPriority @default(MEDIUM)
  scheduledFor DateTime?
  isBroadcast  Boolean?             @default(false)

  status       NotificationStatus @default(PENDING)
  sentAt       DateTime?
  readAt       DateTime?
  failedAt     DateTime?
  errorMessage String?

  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
  @@index([status])
}

// ============= MAINTENANCE LOGS =============
model MaintenanceLog {
  id                 String    @id @default(cuid())
  vehicleId          String
  vehicle            Vehicle   @relation(fields: [vehicleId], references: [id])
  
  type               MaintenanceType
  status             MaintenanceStatus @default(SCHEDULED)
  scheduledDate      DateTime?
  completedDate      DateTime?
  mileageAtService   Int?
  nextServiceMileage Int?
  description        String?
  performedTasks     String[]
  servicedBy         String?
  serviceLocation    String?
  cost               Float?
  invoiceNumber      String?
  notes              String?
  partsReplaced      String[]
  warranty           Int? // months
  warrantyExpiresAt  DateTime?
  isUnderWarranty    Boolean?  @default(false)
  vehicleDowntime    Int? // days
  estimatedCost      Float?
  metadata           Json?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([vehicleId])
  @@index([type])
  @@index([status])
}

// ============= SCHEDULE TEMPLATES =============
model ScheduleTemplate {
  id           String   @id @default(cuid())
  instructorId String
  instructor   User     @relation(fields: [instructorId], references: [id])
  name         String
  description  String?
  weekPattern  Json // JSON array of schedule patterns
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([instructorId])
}

// ============= SCHEDULE EXCEPTIONS =============
model ScheduleException {
  id           String @id @default(cuid())
  instructorId String
  instructor   User   @relation(fields: [instructorId], references: [id])

  type      ScheduleExceptionType
  startDate DateTime
  endDate   DateTime
  allDay    Boolean  @default(true)
  startTime String? // "14:00" if not allDay
  endTime   String? // "18:00" if not allDay

  isApproved                Boolean?  @default(false)
  approvedBy                String?
  approvedAt                DateTime?
  affectsBookings           Boolean?  @default(true)
  bookingsReassigned        Int?      @default(0)
  notificationSent          Boolean?  @default(false)
  medicalCertificateNumber  String?
  isCompanyWide             Boolean?  @default(false)
  location                  String?
  compensationRate          Float?
  substitutingForId         String?
  additionalCompensation    Float?
  certificateExpected       Boolean?  @default(false)
  reminderSent              Boolean?  @default(false)
  estimatedCost             Float?
  metadata                  Json?

  reason      String
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([instructorId])
  @@index([startDate, endDate])
}

// ============= ENUMS (unchanged) =============

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
  BRANCH_MANAGER
  DISPATCHER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
  RESCHEDULED
}

enum PackageStatus {
  PENDING
  ACTIVE
  DEPLETED
  EXPIRED
  CANCELLED
}

enum LessonType {
  STANDARD
  CITY_TRAFFIC
  HIGHWAY
  PARKING
  EXAM_PREPARATION
  NIGHT_DRIVING
  MANEUVERS
  THEORY
  EMERGENCY_BRAKING
  HILL_START
  COUNTRY_ROADS
  ROUNDABOUTS
  FIRST_LESSON
}

enum VehicleCategory {
  B
  B1
  B_AUTOMATIC
  C
  C1
  D
  D1
  BE
  CE
  C1E
  DE
  D1E
}

enum Transmission {
  MANUAL
  AUTOMATIC
  SEMI_AUTOMATIC
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
  HYBRID_PLUGIN
  LPG
  CNG
}

enum VehicleStatus {
  ACTIVE
  MAINTENANCE
  REPAIR
  INACTIVE
  RESERVED
}

enum OwnershipType {
  OWNED
  LEASED
  RENTED
  SUBSCRIPTION
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
  EXPIRED
}

enum PaymentMethod {
  P24
  CARD
  TRANSFER
  CASH
  PACKAGE
  CREDITS
}

enum NotificationType {
  BOOKING_CONFIRMATION
  BOOKING_REMINDER
  BOOKING_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  SCHEDULE_CHANGE
  LESSON_FEEDBACK
  EXAM_REMINDER
  SYSTEM_NOTIFICATION
  PROMOTIONAL
}

enum NotificationChannel {
  EMAIL
  SMS
  PUSH
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  READ
  FAILED
  CANCELLED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceType {
  REGULAR_SERVICE
  OIL_CHANGE
  TIRE_CHANGE
  BRAKE_SERVICE
  INSPECTION
  REPAIR
  CLEANING
  OTHER
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum ScheduleExceptionType {
  VACATION
  SICK_LEAVE
  PERSONAL_LEAVE
  TRAINING
  HOLIDAY
  COMPANY_EVENT
  OTHER
}