// ============================================
// AUTO-GENERATED PRISMA SCHEMA
// Generated at: 2025-08-29T20:08:36.110Z
// DO NOT EDIT DIRECTLY
// ============================================

// ============================================
// CONFIGURATION
// ============================================

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema", "prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// ENUMS
// ============================================

enum BookingStatus {
  scheduled
  completed
  cancelled
  no_show
}

enum BookingType {
  theory
  practical
  exam
}

enum CancellationStatus {
  pending
  approved
  rejected
}

enum ConversationType {
  direct
  group
  announcement
}

enum DocumentCategory {
  license
  medical
  contract
  certificate
}

enum DocumentStatus {
  pending
  verified
  rejected
  expired
}

enum DocumentType {
  pdf
  image
  other
}

enum InvoiceStatus {
  draft
  issued
  paid
  cancelled
}

enum InvoiceType {
  regular
  proforma
  correction
}

enum LocationStatus {
  active
  inactive
}

enum LocationType {
  branch
  exam_center
  meeting_point
}

enum MessageStatus {
  sent
  delivered
  read
}

enum MessageType {
  text
  file
  lesson_info
}

enum PackageCategory {
  basic
  standard
  premium
  intensive
}

enum PackageStatus {
  active
  inactive
  archived
}

enum PaymentMethod {
  cash
  card
  transfer
  blik
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
}

enum Role {
  student
  instructor
  admin
}

enum TicketCategory {
  technical
  billing
  scheduling
  other
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum VehicleFuelType {
  petrol
  diesel
  electric
  hybrid
}

enum VehicleStatus {
  available
  in_use
  maintenance
}

enum VehicleTransmission {
  manual
  automatic
}

// ============================================
// MODELS
// ============================================

model Announcement {
  id          String    @id @default(uuid())
  title       String
  content     String    @db.Text
  authorId    String    @map("author_id")
  author      User      @relation(fields: [authorId], references: [id])
  important   Boolean   @default(false)
  publishedAt DateTime  @default(now()) @map("published_at")
  expiresAt   DateTime? @map("expires_at")

  @@map("announcements")
}

model AvailabilitySlot {
  id           String   @id @default(uuid())
  instructorId String   @map("instructor_id")
  date         DateTime @db.Date
  startTime    DateTime @map("start_time") @db.Time
  endTime      DateTime @map("end_time") @db.Time
  isAvailable  Boolean  @default(true) @map("is_available")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  instructor User @relation(fields: [instructorId], references: [id])

  @@unique([instructorId, date, startTime])
  @@index([instructorId, date])
  @@map("availability_slots")
}

model Booking {
  id              String        @id @default(uuid())
  studentId       String        @map("student_id")
  instructorId    String        @map("instructor_id")
  vehicleId       String?       @map("vehicle_id")
  locationId      String?       @map("location_id")
  startTime       DateTime      @map("start_time")
  endTime         DateTime      @map("end_time")
  type            BookingType
  status          BookingStatus @default(scheduled)
  notes           String?       @db.Text
  price           Decimal?      @db.Decimal(10, 2)
  durationMinutes Int?          @map("duration_minutes")
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  student             User                 @relation("StudentBookings", fields: [studentId], references: [id])
  instructor          User                 @relation("InstructorBookings", fields: [instructorId], references: [id])
  vehicle             Vehicle?             @relation(fields: [vehicleId], references: [id])
  location            Location?            @relation(fields: [locationId], references: [id])
  payment             Payment[]
  cancellationRequest CancellationRequest?

  @@index([studentId, startTime(sort: Desc)])
  @@index([instructorId, startTime(sort: Desc)])
  @@index([startTime])
  @@index([status])
  @@map("bookings")
}

model CancellationRequest {
  id          String             @id @default(uuid())
  bookingId   String             @unique @map("booking_id")
  requestedBy String             @map("requested_by")
  reason      String?            @db.Text
  status      CancellationStatus @default(pending)
  createdAt   DateTime           @default(now()) @map("created_at")

  // Relations
  booking   Booking @relation(fields: [bookingId], references: [id])
  requester User    @relation(fields: [requestedBy], references: [id])

  @@index([status])
  @@map("cancellation_requests")
}

model Conversation {
  id            String           @id @default(uuid())
  type          ConversationType
  name          String?
  participants  Json             @default("[]")
  lastMessageId String?          @unique @map("last_message_id")
  pinned        Boolean          @default(false)
  muted         Boolean          @default(false)
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @updatedAt @map("updated_at")

  // Relations
  messages    Message[] @relation("ConversationMessages")
  lastMessage Message?  @relation("LastMessage", fields: [lastMessageId], references: [id])

  @@index([type])
  @@map("conversations")
}

model Document {
  id          String            @id @default(uuid())
  userId      String            @map("user_id")
  user        User              @relation(fields: [userId], references: [id])
  name        String
  type        DocumentType?
  category    DocumentCategory?
  fileUrl     String            @map("file_url")
  sizeBytes   Int?              @map("size_bytes")
  uploadDate  DateTime          @default(now()) @map("upload_date")
  expiryDate  DateTime?         @map("expiry_date")
  status      DocumentStatus    @default(pending)
  description String?           @db.Text
  createdAt   DateTime          @default(now()) @map("created_at")

  @@index([userId])
  @@index([status])
  @@map("documents")
}

model FAQ {
  id               String   @id @default(uuid())
  question         String   @db.Text
  answer           String   @db.Text
  category         String?
  helpful          Int      @default(0)
  notHelpful       Int      @default(0) @map("not_helpful")
  tags             Json     @default("[]")
  relatedQuestions Json     @default("[]") @map("related_questions")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  @@index([category])
  @@map("faq")
}

model Instructor {
  id                   String   @id
  user                 User     @relation(fields: [id], references: [id], onDelete: Cascade)
  licenseNumber        String   @unique @map("license_number")
  licenseExpiry        DateTime @map("license_expiry")
  yearsExperience      Int      @default(0) @map("years_experience")
  rating               Decimal  @default(0.00) @db.Decimal(3, 2)
  totalReviews         Int      @default(0) @map("total_reviews")
  availabilitySchedule Json     @default("{}") @map("availability_schedule")
  specializations      Json     @default("[]")
  morningAvailable     Boolean  @default(true) @map("morning_available")
  afternoonAvailable   Boolean  @default(true) @map("afternoon_available")
  eveningAvailable     Boolean  @default(true) @map("evening_available")
  weekendAvailable     Boolean  @default(false) @map("weekend_available")

  // Relations
  locations InstructorLocation[]
  vehicles  InstructorVehicle[]

  @@map("instructors")
}

model InstructorLocation {
  instructorId String  @map("instructor_id")
  locationId   String  @map("location_id")
  isPrimary    Boolean @default(false) @map("is_primary")

  // Relations
  instructor Instructor @relation(fields: [instructorId], references: [id])
  location   Location   @relation(fields: [locationId], references: [id])

  @@id([instructorId, locationId])
  @@map("instructor_locations")
}

model InstructorVehicle {
  instructorId String  @map("instructor_id")
  vehicleId    String  @map("vehicle_id")
  isPreferred  Boolean @default(false) @map("is_preferred")

  // Relations
  instructor Instructor @relation(fields: [instructorId], references: [id])
  vehicle    Vehicle    @relation(fields: [vehicleId], references: [id])

  @@id([instructorId, vehicleId])
  @@map("instructor_vehicles")
}

model Invoice {
  id             String        @id @default(uuid())
  number         String        @unique
  type           InvoiceType   @default(regular)
  status         InvoiceStatus @default(draft)
  customerId     String        @map("customer_id")
  issueDate      DateTime      @map("issue_date")
  dueDate        DateTime      @map("due_date")
  paymentDate    DateTime?     @map("payment_date")
  subtotal       Decimal       @db.Decimal(10, 2)
  taxRate        Decimal       @default(23.00) @map("tax_rate") @db.Decimal(5, 2)
  taxAmount      Decimal       @map("tax_amount") @db.Decimal(10, 2)
  total          Decimal       @db.Decimal(10, 2)
  paid           Decimal       @default(0.00) @db.Decimal(10, 2)
  due            Decimal?      @db.Decimal(10, 2)
  items          Json          @default("[]")
  billingDetails Json          @default("{}") @map("billing_details")
  createdAt      DateTime      @default(now()) @map("created_at")

  // Relations
  customer User     @relation("CustomerInvoices", fields: [customerId], references: [id])
  payment  Payment?

  @@index([customerId])
  @@index([status])
  @@index([issueDate])
  @@map("invoices")
}

model Location {
  id             String         @id @default(uuid())
  name           String
  type           LocationType
  status         LocationStatus @default(active)
  address        String
  city           String
  postalCode     String         @map("postal_code")
  country        String         @default("Poland")
  lat            Decimal?       @db.Decimal(10, 8)
  lng            Decimal?       @db.Decimal(11, 8)
  phone          String?
  email          String?
  website        String?
  workingHours   Json           @default("{}") @map("working_hours")
  totalStudents  Int            @default(0) @map("total_students")
  activeStudents Int            @default(0) @map("active_students")
  monthlyRevenue Decimal        @default(0.00) @map("monthly_revenue") @db.Decimal(10, 2)
  createdAt      DateTime       @default(now()) @map("created_at")

  // Relations
  vehicles    Vehicle[]
  bookings    Booking[]
  instructors InstructorLocation[]

  @@index([type])
  @@index([status])
  @@map("locations")
}

model Message {
  id             String        @id @default(uuid())
  conversationId String        @map("conversation_id")
  senderId       String        @map("sender_id")
  content        String?       @db.Text
  type           MessageType   @default(text)
  status         MessageStatus @default(sent)
  attachments    Json          @default("[]")
  sentAt         DateTime      @default(now()) @map("sent_at")

  // Relations
  conversation   Conversation  @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User          @relation(fields: [senderId], references: [id])
  lastMessageFor Conversation? @relation("LastMessage")

  @@index([conversationId, sentAt(sort: Desc)])
  @@index([senderId])
  @@map("messages")
}

model Package {
  id              String           @id @default(uuid())
  name            String
  description     String?          @db.Text
  category        PackageCategory?
  status          PackageStatus    @default(active)
  price           Decimal          @db.Decimal(10, 2)
  discountedPrice Decimal?         @map("discounted_price") @db.Decimal(10, 2)
  durationDays    Int              @map("duration_days")
  theoryHours     Int              @default(0) @map("theory_hours")
  practicalHours  Int              @default(0) @map("practical_hours")
  additionalHours Int              @default(0) @map("additional_hours")
  examAttempts    Int              @default(1) @map("exam_attempts")
  features        Json             @default("[]")
  pricingRules    Json             @default("{}") @map("pricing_rules")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")

  // Relations
  studentPackages StudentPackage[]
  payments        Payment[]

  @@index([category])
  @@index([status])
  @@map("packages")
}

model Payment {
  id        String         @id @default(uuid())
  studentId String         @map("student_id")
  bookingId String?        @map("booking_id")
  packageId String?        @map("package_id")
  invoiceId String?        @unique @map("invoice_id")
  amount    Decimal        @db.Decimal(10, 2)
  currency  String         @default("PLN")
  method    PaymentMethod?
  status    PaymentStatus  @default(pending)
  paidAt    DateTime?      @map("paid_at")
  metadata  Json           @default("{}")
  createdAt DateTime       @default(now()) @map("created_at")

  // Relations
  student User     @relation("StudentPayments", fields: [studentId], references: [id])
  booking Booking? @relation(fields: [bookingId], references: [id])
  package Package? @relation(fields: [packageId], references: [id])
  invoice Invoice? @relation(fields: [invoiceId], references: [id])

  @@index([studentId, createdAt(sort: Desc)])
  @@index([status])
  @@index([bookingId])
  @@index([packageId])
  @@map("payments")
}

model Student {
  id                      String    @id
  user                    User      @relation(fields: [id], references: [id], onDelete: Cascade)
  pesel                   String?   @unique
  birthDate               DateTime  @map("birth_date")
  address                 String?
  city                    String?
  postalCode              String?   @map("postal_code")
  drivingLicenseNumber    String?   @map("driving_license_number")
  licenseCategory         String?   @map("license_category")
  theoryHoursCompleted    Int       @default(0) @map("theory_hours_completed")
  practicalHoursCompleted Int       @default(0) @map("practical_hours_completed")
  totalCredits            Int       @default(0) @map("total_credits")
  usedCredits             Int       @default(0) @map("used_credits")
  packageExpiry           DateTime? @map("package_expiry")
  skillsProgress          Json      @default("{}") @map("skills_progress")
  weatherPreferences      Json      @default("{}") @map("weather_preferences")

  @@map("students")
}

model StudentPackage {
  id               String   @id @default(uuid())
  studentId        String   @map("student_id")
  packageId        String   @map("package_id")
  purchaseDate     DateTime @default(now()) @map("purchase_date")
  expiryDate       DateTime @map("expiry_date")
  totalCredits     Int      @map("total_credits")
  usedCredits      Int      @default(0) @map("used_credits")
  remainingCredits Int?     @map("remaining_credits")
  status           String   @default("active")
  pricePaid        Decimal  @map("price_paid") @db.Decimal(10, 2)
  createdAt        DateTime @default(now()) @map("created_at")

  // Relations
  student User    @relation(fields: [studentId], references: [id])
  package Package @relation(fields: [packageId], references: [id])

  @@index([studentId])
  @@index([packageId])
  @@index([status])
  @@map("student_packages")
}

model SupportTicket {
  id         String          @id @default(uuid())
  number     String          @unique
  userId     String          @map("user_id")
  subject    String
  category   TicketCategory?
  status     TicketStatus    @default(open)
  priority   TicketPriority  @default(medium)
  assignedTo String?         @map("assigned_to")
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime        @updatedAt @map("updated_at")

  // Relations
  user     User            @relation("UserTickets", fields: [userId], references: [id])
  assignee User?           @relation("AssignedTickets", fields: [assignedTo], references: [id])
  messages TicketMessage[]

  @@index([userId])
  @@index([status])
  @@index([assignedTo])
  @@map("support_tickets")
}

model TicketMessage {
  id          String   @id @default(uuid())
  ticketId    String   @map("ticket_id")
  authorId    String   @map("author_id")
  content     String   @db.Text
  attachments Json     @default("[]")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  ticket SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  author User          @relation(fields: [authorId], references: [id])

  @@index([ticketId])
  @@map("ticket_messages")
}

model User {
  id               String    @id @default(uuid())
  email            String    @unique
  passwordHash     String    @map("password_hash")
  firstName        String    @map("first_name")
  lastName         String    @map("last_name")
  phone            String?
  avatarUrl        String?   @map("avatar_url")
  role             Role
  emailVerified    Boolean   @default(false) @map("email_verified")
  phoneVerified    Boolean   @default(false) @map("phone_verified")
  twoFactorEnabled Boolean   @default(false) @map("two_factor_enabled")
  twoFactorMethod  String?   @map("two_factor_method")
  lastLogin        DateTime? @map("last_login")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  // Relations
  student    Student?
  instructor Instructor?

  // Bookings relations
  bookingsAsStudent    Booking[] @relation("StudentBookings")
  bookingsAsInstructor Booking[] @relation("InstructorBookings")

  // Other relations
  paymentsAsStudent    Payment[]             @relation("StudentPayments")
  invoicesAsCustomer   Invoice[]             @relation("CustomerInvoices")
  documents            Document[]
  sentMessages         Message[]
  supportTickets       SupportTicket[]       @relation("UserTickets")
  assignedTickets      SupportTicket[]       @relation("AssignedTickets")
  ticketMessages       TicketMessage[]
  announcements        Announcement[]
  cancellationRequests CancellationRequest[]
  availabilitySlots    AvailabilitySlot[]
  studentPackages      StudentPackage[]

  @@index([email])
  @@index([role])
  @@index([createdAt(sort: Desc)])
  @@map("users")
}

model Vehicle {
  id                 String              @id @default(uuid())
  registrationNumber String              @unique @map("registration_number")
  make               String
  model              String
  year               Int
  transmission       VehicleTransmission
  fuelType           VehicleFuelType?    @map("fuel_type")
  insuranceExpiry    DateTime            @map("insurance_expiry")
  inspectionExpiry   DateTime            @map("inspection_expiry")
  status             VehicleStatus       @default(available)
  locationId         String?             @map("location_id")
  createdAt          DateTime            @default(now()) @map("created_at")

  // Relations
  location    Location?           @relation(fields: [locationId], references: [id])
  bookings    Booking[]
  instructors InstructorVehicle[]

  @@index([status])
  @@index([locationId])
  @@map("vehicles")
}
