#!/usr/bin/env node
// analyze-driving-school.ts
// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: npx ts-node analyze-driving-school.ts

import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';

interface MockDataLocation {
  file: string;
  line: number;
  content: string;
  module: 'admin' | 'instructor' | 'student' | 'shared';
  component: string;
}

interface AnalysisResult {
  mockDataFiles: MockDataLocation[];
  entities: Map<string, EntityData>;
  relations: Relation[];
  businessRules: string[];
  recommendations: string[];
}

interface EntityData {
  name: string;
  fields: Map<string, FieldInfo>;
  occurrences: string[];
  recordCount: number;
  module: string;
}

interface FieldInfo {
  name: string;
  types: Set<string>;
  nullable: boolean;
  isArray: boolean;
  isFK: boolean;
  examples: any[];
}

interface Relation {
  from: string;
  to: string;
  type: 'one-to-one' | 'one-to-many' | 'many-to-many';
  field: string;
}

class DrivingSchoolAnalyzer {
  private mockDataFiles: MockDataLocation[] = [];
  private entities = new Map<string, EntityData>();
  private relations: Relation[] = [];
  
  async analyze(): Promise<AnalysisResult> {
    console.log('üöó DRIVING SCHOOL LMS - –ê–Ω–∞–ª—ñ–∑ MockData\n');
    console.log('='.repeat(60) + '\n');
    
    // –ö—Ä–æ–∫ 1: –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ MockData
    console.log('üìÇ –ö—Ä–æ–∫ 1: –ü–æ—à—É–∫ MockData —Ñ–∞–π–ª—ñ–≤...\n');
    this.findMockData();
    
    // –ö—Ä–æ–∫ 2: –í–∏—Ç—è–≥–Ω—É—Ç–∏ —Ç–∞ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏
    console.log('\nüìä –ö—Ä–æ–∫ 2: –ê–Ω–∞–ª—ñ–∑ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö...\n');
    this.extractAndAnalyze();
    
    // –ö—Ä–æ–∫ 3: –í–∏—è–≤–∏—Ç–∏ –∑–≤'—è–∑–∫–∏
    console.log('\nüîó –ö—Ä–æ–∫ 3: –í–∏—è–≤–ª–µ–Ω–Ω—è –∑–≤—è–∑–∫—ñ–≤...\n');
    this.detectRelations();
    
    // –ö—Ä–æ–∫ 4: –ë—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞
    console.log('\nüìã –ö—Ä–æ–∫ 4: –í–∏—è–≤–ª–µ–Ω–Ω—è –±—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª...\n');
    const businessRules = this.extractBusinessRules();
    
    // –ö—Ä–æ–∫ 5: –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π
    console.log('\nüí° –ö—Ä–æ–∫ 5: –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π...\n');
    const recommendations = this.generateRecommendations();
    
    // –ö—Ä–æ–∫ 6: –ó–≤—ñ—Ç
    this.generateReport(businessRules, recommendations);
    
    return {
      mockDataFiles: this.mockDataFiles,
      entities: this.entities,
      relations: this.relations,
      businessRules,
      recommendations
    };
  }
  
  private findMockData() {
    const patterns = [
      'mock', 'Mock', 'MOCK',
      'dummy', 'Dummy', 'DUMMY',  
      'fake', 'Fake', 'FAKE',
      'sample', 'Sample', 'SAMPLE',
      'test.*Data', 'example.*Data'
    ];
    
    const searchPaths = [
      'app',
      'components',
      'lib',
      'hooks'
    ];
    
    let foundCount = 0;
    
    searchPaths.forEach(searchPath => {
      if (!fs.existsSync(searchPath)) return;
      
      patterns.forEach(pattern => {
        try {
          // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ grep –¥–ª—è –ø–æ—à—É–∫—É
          const command = `grep -r "${pattern}" --include="*.tsx" --include="*.ts" -n ${searchPath} 2>/dev/null || true`;
          const result = execSync(command, { encoding: 'utf-8' });
          
          if (result) {
            const lines = result.split('\n').filter(l => l.trim());
            
            lines.forEach(line => {
              const match = line.match(/^([^:]+):(\d+):(.*)$/);
              if (match) {
                const [, file, lineNum, content] = match;
                
                // –í–∏–∑–Ω–∞—á–∞—î–º–æ –º–æ–¥—É–ª—å
                let module: 'admin' | 'instructor' | 'student' | 'shared' = 'shared';
                if (file.includes('/admin/')) module = 'admin';
                else if (file.includes('/instructor/')) module = 'instructor';
                else if (file.includes('/student/')) module = 'student';
                
                // –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
                const component = path.basename(path.dirname(file));
                
                // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö
                if (this.isDataDefinition(content)) {
                  this.mockDataFiles.push({
                    file,
                    line: parseInt(lineNum),
                    content: content.trim(),
                    module,
                    component
                  });
                  foundCount++;
                }
              }
            });
          }
        } catch (error) {
          // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ grep
        }
      });
    });
    
    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${foundCount} –≤–∏–∑–Ω–∞—á–µ–Ω—å MockData`);
    
    // –ì—Ä—É–ø—É—î–º–æ –ø–æ –º–æ–¥—É–ª—è—Ö
    const byModule = this.mockDataFiles.reduce((acc, item) => {
      acc[item.module] = (acc[item.module] || 0) + 1;
      return acc;
    }, {} as Record<string, number>);
    
    Object.entries(byModule).forEach(([module, count]) => {
      console.log(`   ‚Ä¢ ${module}: ${count} —Ñ–∞–π–ª—ñ–≤`);
    });
  }
  
  private isDataDefinition(content: string): boolean {
    const dataPatterns = [
      /const\s+\w*[Mm]ock/,
      /const\s+\w*[Dd]ata/,
      /const\s+\w*[Dd]ummy/,
      /const\s+fake/,
      /const\s+sample/,
      /export\s+const\s+\w*[Mm]ock/,
      /=\s*\[[\s\S]*{/,  // –º–∞—Å–∏–≤–∏ –æ–±'—î–∫—Ç—ñ–≤
      /=\s*{[\s\S]*id:/   // –æ–±'—î–∫—Ç–∏ –∑ id
    ];
    
    return dataPatterns.some(pattern => pattern.test(content));
  }
  
  private extractAndAnalyze() {
    this.mockDataFiles.forEach(location => {
      try {
        const fileContent = fs.readFileSync(location.file, 'utf-8');
        
        // –í–∏—Ç—è–≥—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞–≤–∫–æ–ª–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —Ä—è–¥–∫–∞
        const lines = fileContent.split('\n');
        const startLine = Math.max(0, location.line - 1);
        
        // –®—É–∫–∞—î–º–æ –ø–æ–≤–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–æ—ó
        let dataStr = '';
        let braceCount = 0;
        let inData = false;
        
        for (let i = startLine; i < lines.length && i < startLine + 200; i++) {
          const line = lines[i];
          
          if (!inData && (line.includes('=') || line.includes('const'))) {
            inData = true;
          }
          
          if (inData) {
            dataStr += line + '\n';
            braceCount += (line.match(/[\[{]/g) || []).length;
            braceCount -= (line.match(/[\]}]/g) || []).length;
            
            if (braceCount === 0 && dataStr.includes('}')) {
              break;
            }
          }
        }
        
        // –ü–∞—Ä—Å–∏–º–æ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ
        this.parseAndAnalyzeData(dataStr, location);
        
      } catch (error) {
        console.error(`   ‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ ${location.file}:${location.line}`);
      }
    });
    
    console.log(`\nüìä –í–∏—è–≤–ª–µ–Ω–æ ${this.entities.size} —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π`);
  }
  
  private parseAndAnalyzeData(dataStr: string, location: MockDataLocation) {
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–∑–≤—É —Å—É—Ç–Ω–æ—Å—Ç—ñ
    const entityMatch = dataStr.match(/const\s+(\w+)/);
    if (!entityMatch) return;
    
    let entityName = entityMatch[1]
      .replace(/Mock|Data|Dummy|Fake|Sample/gi, '')
      .replace(/s$/, ''); // –≤–∏–¥–∞–ª—è—î–º–æ –º–Ω–æ–∂–∏–Ω—É
    
    // –ù–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –Ω–∞–∑–≤—É
    entityName = entityName.charAt(0).toLowerCase() + entityName.slice(1);
    
    // –î–æ–¥–∞—î–º–æ –∞–±–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å—É—Ç–Ω—ñ—Å—Ç—å
    if (!this.entities.has(entityName)) {
      this.entities.set(entityName, {
        name: entityName,
        fields: new Map(),
        occurrences: [],
        recordCount: 0,
        module: location.module
      });
    }
    
    const entity = this.entities.get(entityName)!;
    entity.occurrences.push(`${location.file}:${location.line}`);
    
    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–æ–ª—ñ–≤
    this.extractFields(dataStr, entity);
  }
  
  private extractFields(dataStr: string, entity: EntityData) {
    // –®—É–∫–∞—î–º–æ –æ–±'—î–∫—Ç–∏ –≤ –¥–∞–Ω–∏—Ö
    const objectMatches = dataStr.matchAll(/{\s*([^}]+)\s*}/g);
    
    for (const match of objectMatches) {
      const objectStr = match[1];
      
      // –†–æ–∑–±–∏—Ä–∞—î–º–æ –ø–æ–ª—è
      const fieldMatches = objectStr.matchAll(/(\w+)\s*:\s*([^,]+)/g);
      
      for (const fieldMatch of fieldMatches) {
        const [, fieldName, fieldValue] = fieldMatch;
        
        if (!entity.fields.has(fieldName)) {
          entity.fields.set(fieldName, {
            name: fieldName,
            types: new Set(),
            nullable: false,
            isArray: false,
            isFK: false,
            examples: []
          });
        }
        
        const field = entity.fields.get(fieldName)!;
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø
        if (fieldValue.includes('[')) {
          field.isArray = true;
        }
        if (fieldValue.includes('null')) {
          field.nullable = true;
        }
        if (fieldName.endsWith('Id') || fieldName.endsWith('_id')) {
          field.isFK = true;
        }
        
        // –í–∏–∑–Ω–∞—á–∞—î–º–æ JavaScript —Ç–∏–ø
        if (fieldValue.includes('"') || fieldValue.includes("'")) {
          field.types.add('string');
        } else if (fieldValue.match(/\d+/)) {
          field.types.add('number');
        } else if (fieldValue.includes('true') || fieldValue.includes('false')) {
          field.types.add('boolean');
        } else if (fieldValue.includes('new Date')) {
          field.types.add('Date');
        }
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø—Ä–∏–∫–ª–∞–¥
        if (field.examples.length < 3) {
          field.examples.push(fieldValue.trim());
        }
      }
      
      entity.recordCount++;
    }
  }
  
  private detectRelations() {
    this.entities.forEach((entity, entityName) => {
      entity.fields.forEach((field, fieldName) => {
        // Foreign Keys
        if (field.isFK) {
          const targetEntity = fieldName.replace(/(_id|Id)$/, '');
          
          this.relations.push({
            from: entityName,
            to: targetEntity,
            type: 'one-to-many',
            field: fieldName
          });
        }
        
        // Arrays of IDs (many-to-many)
        if (field.isArray && fieldName.includes('Id')) {
          const targetEntity = fieldName.replace(/(Ids|Id)$/, '');
          
          this.relations.push({
            from: entityName,
            to: targetEntity,
            type: 'many-to-many',
            field: fieldName
          });
        }
      });
    });
    
    console.log(`‚úÖ –í–∏—è–≤–ª–µ–Ω–æ ${this.relations.length} –∑–≤'—è–∑–∫—ñ–≤ –º—ñ–∂ —Å—É—Ç–Ω–æ—Å—Ç—è–º–∏`);
  }
  
  private extractBusinessRules(): string[] {
    const rules: string[] = [];
    
    // –°–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –∞–≤—Ç–æ—à–∫–æ–ª–∏
    rules.push('–°—Ç—É–¥–µ–Ω—Ç –º–æ–∂–µ –º–∞—Ç–∏ –ª–∏—à–µ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞');
    rules.push('–£—Ä–æ–∫ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏–π –Ω–∞ –º–∏–Ω—É–ª—É –¥–∞—Ç—É');
    rules.push('–Ü–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –º–æ–∂–µ –º–∞—Ç–∏ 2 —É—Ä–æ–∫–∏ –æ–¥–Ω–æ—á–∞—Å–Ω–æ');
    rules.push('–°—Ç—É–¥–µ–Ω—Ç –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 30 –≥–æ–¥–∏–Ω –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø–µ—Ä–µ–¥ –µ–∫–∑–∞–º–µ–Ω–æ–º');
    rules.push('–û–ø–ª–∞—Ç–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ –∑–¥—ñ–π—Å–Ω–µ–Ω–∞ –ø–µ—Ä–µ–¥ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è–º');
    rules.push('–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É —Å—Ç—Ä–∞—Ö–æ–≤–∫—É —Ç–∞ —Ç–µ—Ö–æ–≥–ª—è–¥');
    
    // –í–∏—è–≤–ª—è—î–º–æ –ø—Ä–∞–≤–∏–ª–∞ –∑ –¥–∞–Ω–∏—Ö
    this.entities.forEach((entity, name) => {
      if (name.includes('booking') || name.includes('lesson')) {
        rules.push(`${name}: –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ startTime < endTime`);
      }
      
      if (name.includes('payment')) {
        rules.push(`${name}: —Å—É–º–∞ –ø–æ–≤–∏–Ω–Ω–∞ –±—É—Ç–∏ > 0`);
      }
      
      if (name.includes('vehicle')) {
        rules.push(`${name}: –ø–æ–≤–∏–Ω–µ–Ω –º–∞—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ–π–Ω–∏–π –Ω–æ–º–µ—Ä`);
      }
    });
    
    return rules;
  }
  
  private generateRecommendations(): string[] {
    const recommendations: string[] = [];
    
    // –û—Å–Ω–æ–≤–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ
    recommendations.push('–û–°–ù–û–í–ù–Ü –¢–ê–ë–õ–ò–¶–Ü:');
    recommendations.push('‚Ä¢ users (–∑ –ø–æ–ª–µ–º role: student/instructor/admin)');
    recommendations.push('‚Ä¢ vehicles (–∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ —à–∫–æ–ª–∏)');
    recommendations.push('‚Ä¢ bookings (–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è —É—Ä–æ–∫—ñ–≤)');
    recommendations.push('‚Ä¢ payments (–æ–ø–ª–∞—Ç–∏)');
    recommendations.push('‚Ä¢ packages (–ø–∞–∫–µ—Ç–∏ —É—Ä–æ–∫—ñ–≤)');
    
    recommendations.push('\nJUNCTION –¢–ê–ë–õ–ò–¶–Ü:');
    recommendations.push('‚Ä¢ user_packages (—Å—Ç—É–¥–µ–Ω—Ç ‚Üî –ø–∞–∫–µ—Ç–∏)');
    recommendations.push('‚Ä¢ instructor_vehicles (—ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ‚Üî –∞–≤—Ç–æ)');
    recommendations.push('‚Ä¢ booking_skills (—É—Ä–æ–∫ ‚Üî –Ω–∞–≤–∏—á–∫–∏)');
    
    recommendations.push('\nLOOKUP –¢–ê–ë–õ–ò–¶–Ü:');
    recommendations.push('‚Ä¢ lesson_types (—Ç–∏–ø —É—Ä–æ–∫—É: –ø—Ä–∞–∫—Ç–∏–∫–∞/—Ç–µ–æ—Ä—ñ—è)');
    recommendations.push('‚Ä¢ payment_methods (–≥–æ—Ç—ñ–≤–∫–∞/–∫–∞—Ä—Ç–∫–∞/–ø–µ—Ä–µ–≤–æ–¥)');
    recommendations.push('‚Ä¢ booking_statuses (–∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ/–∑–∞–≤–µ—Ä—à–µ–Ω–æ/—Å–∫–∞—Å–æ–≤–∞–Ω–æ)');
    
    recommendations.push('\n–Ü–ù–î–ï–ö–°–ò:');
    recommendations.push('‚Ä¢ bookings: (instructor_id, date, time)');
    recommendations.push('‚Ä¢ payments: (user_id, created_at)');
    recommendations.push('‚Ä¢ vehicles: (registration_number)');
    
    return recommendations;
  }
  
  private generateReport(businessRules: string[], recommendations: string[]) {
    const report = {
      timestamp: new Date().toISOString(),
      projectType: 'Driving School LMS',
      modulesAnalyzed: ['admin', 'instructor', 'student'],
      statistics: {
        mockDataFiles: this.mockDataFiles.length,
        uniqueEntities: this.entities.size,
        relations: this.relations.length,
        businessRules: businessRules.length
      },
      
      // –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
      entities: Array.from(this.entities.entries()).map(([name, data]) => ({
        name,
        module: data.module,
        fieldCount: data.fields.size,
        occurrences: data.occurrences,
        fields: Array.from(data.fields.entries()).map(([fname, fdata]) => ({
          name: fname,
          types: Array.from(fdata.types),
          isFK: fdata.isFK,
          isArray: fdata.isArray,
          nullable: fdata.nullable
        }))
      })),
      
      relations: this.relations,
      businessRules,
      recommendations,
      
      // SQL –ø—Ä–∏–∫–ª–∞–¥
      sqlExample: this.generateSQLExample()
    };
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–≤—ñ—Ç
    const reportPath = './driving-school-analysis.json';
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    
    // –í–∏–≤–æ–¥–∏–º–æ –ø—ñ–¥—Å—É–º–æ–∫
    console.log('\n' + '='.repeat(60));
    console.log('üìà –ü–Ü–î–°–£–ú–û–ö –ê–ù–ê–õ–Ü–ó–£');
    console.log('='.repeat(60));
    
    console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   ‚Ä¢ MockData —Ñ–∞–π–ª—ñ–≤: ${this.mockDataFiles.length}`);
    console.log(`   ‚Ä¢ –£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö —Å—É—Ç–Ω–æ—Å—Ç–µ–π: ${this.entities.size}`);
    console.log(`   ‚Ä¢ –ó–≤'—è–∑–∫—ñ–≤: ${this.relations.length}`);
    
    console.log('\nüèóÔ∏è –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î:');
    recommendations.forEach(rec => console.log(rec));
    
    console.log('\nüìã –ë—ñ–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞ –∞–≤—Ç–æ—à–∫–æ–ª–∏:');
    businessRules.slice(0, 5).forEach(rule => console.log(`   ‚Ä¢ ${rule}`));
    
    console.log(`\n‚úÖ –ü–æ–≤–Ω–∏–π –∑–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: ${reportPath}`);
    console.log('\nüéØ –ù–ê–°–¢–£–ü–ù–ò–ô –ö–†–û–ö:');
    console.log('   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –ø—Ä–æ–º–ø—Ç –≤–∏—â–µ —Ä–∞–∑–æ–º –∑—ñ –∑–≤—ñ—Ç–æ–º');
    console.log('   –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó Prisma —Å—Ö–µ–º–∏');
  }
  
  private generateSQLExample(): string {
    return `
-- –ü—Ä–∏–∫–ª–∞–¥ –Ω–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –∞–≤—Ç–æ—à–∫–æ–ª–∏

CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20),
    role VARCHAR(20) CHECK (role IN ('student', 'instructor', 'admin')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE vehicles (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    registration_number VARCHAR(20) UNIQUE NOT NULL,
    brand VARCHAR(50),
    model VARCHAR(50),
    year INT,
    transmission VARCHAR(20) CHECK (transmission IN ('manual', 'automatic')),
    fuel_type VARCHAR(20),
    insurance_expiry DATE NOT NULL,
    inspection_expiry DATE NOT NULL
);

CREATE TABLE bookings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    student_id UUID REFERENCES users(id),
    instructor_id UUID REFERENCES users(id),
    vehicle_id UUID REFERENCES vehicles(id),
    start_time TIMESTAMP NOT NULL,
    end_time TIMESTAMP NOT NULL,
    status VARCHAR(20) DEFAULT 'scheduled',
    lesson_type VARCHAR(20) NOT NULL,
    price DECIMAL(10, 2),
    CONSTRAINT no_time_overlap CHECK (start_time < end_time)
);

CREATE TABLE payments (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    booking_id UUID REFERENCES bookings(id),
    amount DECIMAL(10, 2) NOT NULL CHECK (amount > 0),
    currency VARCHAR(3) DEFAULT 'PLN',
    method VARCHAR(20),
    status VARCHAR(20) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- –Ü–Ω–¥–µ–∫—Å–∏ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –ø–æ—à—É–∫—É
CREATE INDEX idx_bookings_instructor_date ON bookings(instructor_id, start_time);
CREATE INDEX idx_bookings_student ON bookings(student_id);
CREATE INDEX idx_payments_user ON payments(user_id, created_at DESC);
`;
  }
}

// –ó–∞–ø—É—Å–∫
async function main() {
  const analyzer = new DrivingSchoolAnalyzer();
  
  try {
    await analyzer.analyze();
    
    console.log('\n‚ú® –ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
    console.log('\nüìù –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ driving-school-analysis.json');
    console.log('   —Ä–∞–∑–æ–º –∑ —Ç–µ—Ö–Ω—ñ—á–Ω–∏–º –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è Prisma —Å—Ö–µ–º–∏');
    
  } catch (error) {
    console.error('\n‚ùå –ü–æ–º–∏–ª–∫–∞:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞—î–º–æ
if (require.main === module) {
  main();
}

export default DrivingSchoolAnalyzer;